(this["webpackJsonpmilkyway-ui"]=this["webpackJsonpmilkyway-ui"]||[]).push([[0],{110:function(e){e.exports=JSON.parse('{"_format":"hh-sol-artifact-1","contractName":"EIP20Interface","sourceName":"contracts/EIP20Interface.sol","abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Transfer","type":"event"},{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"src","type":"address"},{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x","deployedBytecode":"0x","linkReferences":{},"deployedLinkReferences":{}}')},113:function(e,n,t){},167:function(e){e.exports=JSON.parse('{"address":"0x815e57a6Cca2FEd726bd02c32d9810f3929f1c50","abi":[{"inputs":[{"internalType":"address","name":"admin_","type":"address"},{"internalType":"address","name":"v1PriceOracle_","type":"address"},{"internalType":"address","name":"ethUsdAggregator_","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"cTokenAddress","type":"address"},{"indexed":false,"internalType":"address","name":"source","type":"address"},{"indexed":false,"internalType":"enum PriceOracleProxyUSD.AggregatorBase","name":"base","type":"uint8"}],"name":"AggregatorUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"admin","type":"address"}],"name":"SetAdmin","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"guardian","type":"address"}],"name":"SetGuardian","type":"event"},{"constant":false,"inputs":[{"internalType":"address","name":"_admin","type":"address"}],"name":"_setAdmin","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address[]","name":"cTokenAddresses","type":"address[]"},{"internalType":"address[]","name":"sources","type":"address[]"},{"internalType":"enum PriceOracleProxyUSD.AggregatorBase[]","name":"bases","type":"uint8[]"}],"name":"_setAggregators","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_guardian","type":"address"}],"name":"_setGuardian","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_aggregator","type":"address"}],"name":"_setNativeUSDAggregator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"admin","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"aggregators","outputs":[{"internalType":"contract AggregatorV3Interface","name":"source","type":"address"},{"internalType":"enum PriceOracleProxyUSD.AggregatorBase","name":"base","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"curveSwap","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ethUsdAggregator","outputs":[{"internalType":"contract AggregatorV3Interface","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"contract CToken","name":"cToken","type":"address"}],"name":"getUnderlyingPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"guardian","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"v1PriceOracle","outputs":[{"internalType":"contract V1PriceOracleInterface","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"yVaults","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}],"transactionHash":"0xc90d7ae4f7cf33f35337b537386d6d2e5d7eff069249b0c5227e21eb4507e75c","receipt":{"to":null,"from":"0xE6C335Fb79792F3B51B504D12D75B6Fb18A91B76","contractAddress":"0x815e57a6Cca2FEd726bd02c32d9810f3929f1c50","transactionIndex":0,"gasUsed":"910286","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0xda10569f729f9306cf6561222f7b73afc8e9ce8dc6b7c04e351c7b2a941a5a59","transactionHash":"0xc90d7ae4f7cf33f35337b537386d6d2e5d7eff069249b0c5227e21eb4507e75c","logs":[],"blockNumber":3228253,"cumulativeGasUsed":"910286","status":1,"byzantium":true},"args":["0xE6C335Fb79792F3B51B504D12D75B6Fb18A91B76","0x88C47c5a104A518Cb6646B86889967f2190b2639","0x0000000000000000000000000000000000000000"],"solcInputHash":"8766229c442d0d76c329fddbae6b4713","metadata":"{\\"compiler\\":{\\"version\\":\\"0.5.17+commit.d19bba13\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"admin_\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"v1PriceOracle_\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"ethUsdAggregator_\\",\\"type\\":\\"address\\"}],\\"payable\\":false,\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"cTokenAddress\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"source\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"enum PriceOracleProxyUSD.AggregatorBase\\",\\"name\\":\\"base\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"AggregatorUpdated\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"admin\\",\\"type\\":\\"address\\"}],\\"name\\":\\"SetAdmin\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"guardian\\",\\"type\\":\\"address\\"}],\\"name\\":\\"SetGuardian\\",\\"type\\":\\"event\\"},{\\"constant\\":false,\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_admin\\",\\"type\\":\\"address\\"}],\\"name\\":\\"_setAdmin\\",\\"outputs\\":[],\\"payable\\":false,\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"constant\\":false,\\"inputs\\":[{\\"internalType\\":\\"address[]\\",\\"name\\":\\"cTokenAddresses\\",\\"type\\":\\"address[]\\"},{\\"internalType\\":\\"address[]\\",\\"name\\":\\"sources\\",\\"type\\":\\"address[]\\"},{\\"internalType\\":\\"enum PriceOracleProxyUSD.AggregatorBase[]\\",\\"name\\":\\"bases\\",\\"type\\":\\"uint8[]\\"}],\\"name\\":\\"_setAggregators\\",\\"outputs\\":[],\\"payable\\":false,\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"constant\\":false,\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_guardian\\",\\"type\\":\\"address\\"}],\\"name\\":\\"_setGuardian\\",\\"outputs\\":[],\\"payable\\":false,\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"constant\\":false,\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_aggregator\\",\\"type\\":\\"address\\"}],\\"name\\":\\"_setNativeUSDAggregator\\",\\"outputs\\":[],\\"payable\\":false,\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"constant\\":true,\\"inputs\\":[],\\"name\\":\\"admin\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"payable\\":false,\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"constant\\":true,\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"name\\":\\"aggregators\\",\\"outputs\\":[{\\"internalType\\":\\"contract AggregatorV3Interface\\",\\"name\\":\\"source\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"enum PriceOracleProxyUSD.AggregatorBase\\",\\"name\\":\\"base\\",\\"type\\":\\"uint8\\"}],\\"payable\\":false,\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"constant\\":true,\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"name\\":\\"curveSwap\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"payable\\":false,\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"constant\\":true,\\"inputs\\":[],\\"name\\":\\"ethUsdAggregator\\",\\"outputs\\":[{\\"internalType\\":\\"contract AggregatorV3Interface\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"payable\\":false,\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"constant\\":true,\\"inputs\\":[{\\"internalType\\":\\"contract CToken\\",\\"name\\":\\"cToken\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getUnderlyingPrice\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"payable\\":false,\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"constant\\":true,\\"inputs\\":[],\\"name\\":\\"guardian\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"payable\\":false,\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"constant\\":true,\\"inputs\\":[],\\"name\\":\\"v1PriceOracle\\",\\"outputs\\":[{\\"internalType\\":\\"contract V1PriceOracleInterface\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"payable\\":false,\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"constant\\":true,\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"name\\":\\"yVaults\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"payable\\":false,\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"methods\\":{\\"_setAdmin(address)\\":{\\"params\\":{\\"_admin\\":\\"The new admin\\"}},\\"_setAggregators(address[],address[],uint8[])\\":{\\"params\\":{\\"bases\\":\\"The list of ChainLink aggregator bases\\",\\"cTokenAddresses\\":\\"The list of cTokens\\",\\"sources\\":\\"The list of ChainLink aggregator sources\\"}},\\"_setGuardian(address)\\":{\\"params\\":{\\"_guardian\\":\\"The new guardian\\"}},\\"constructor\\":{\\"params\\":{\\"admin_\\":\\"The address of admin to set aggregators\\",\\"v1PriceOracle_\\":\\"The v1 price oracle\\"}},\\"getUnderlyingPrice(address)\\":{\\"params\\":{\\"cToken\\":\\"The cToken to get the underlying price of\\"},\\"return\\":\\"The underlying asset price mantissa (scaled by 1e18)\\"}}},\\"userdoc\\":{\\"methods\\":{\\"_setAdmin(address)\\":{\\"notice\\":\\"Set admin for price oracle proxy\\"},\\"_setAggregators(address[],address[],uint8[])\\":{\\"notice\\":\\"Set ChainLink aggregators for multiple cTokens\\"},\\"_setGuardian(address)\\":{\\"notice\\":\\"Set guardian for price oracle proxy\\"},\\"getUnderlyingPrice(address)\\":{\\"notice\\":\\"Get the underlying price of a listed cToken asset\\"}}}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/PriceOracle/PriceOracleProxyUSD.sol\\":\\"PriceOracleProxyUSD\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"contracts/CErc20.sol\\":{\\"content\\":\\"pragma solidity ^0.5.16;\\\\n\\\\nimport \\\\\\"./CToken.sol\\\\\\";\\\\n\\\\n/**\\\\n * @title Compound\'s CErc20 Contract\\\\n * @notice CTokens which wrap an EIP-20 underlying\\\\n * @author Compound\\\\n */\\\\ncontract CErc20 is CToken, CErc20Interface {\\\\n    /**\\\\n     * @notice Initialize the new money market\\\\n     * @param underlying_ The address of the underlying asset\\\\n     * @param comptroller_ The address of the Comptroller\\\\n     * @param interestRateModel_ The address of the interest rate model\\\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\\\n     * @param name_ ERC-20 name of this token\\\\n     * @param symbol_ ERC-20 symbol of this token\\\\n     * @param decimals_ ERC-20 decimal precision of this token\\\\n     */\\\\n    function initialize(\\\\n        address underlying_,\\\\n        ComptrollerInterface comptroller_,\\\\n        InterestRateModel interestRateModel_,\\\\n        uint256 initialExchangeRateMantissa_,\\\\n        string memory name_,\\\\n        string memory symbol_,\\\\n        uint8 decimals_\\\\n    ) public {\\\\n        // CToken initialize does the bulk of the work\\\\n        super.initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\\\\n\\\\n        // Set underlying and sanity check it\\\\n        underlying = underlying_;\\\\n        EIP20Interface(underlying).totalSupply();\\\\n    }\\\\n\\\\n    /*** User Interface ***/\\\\n\\\\n    /**\\\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\\\n     * @param mintAmount The amount of the underlying asset to supply\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function mint(uint256 mintAmount) external returns (uint256) {\\\\n        (uint256 err, ) = mintInternal(mintAmount, false);\\\\n        require(err == 0, \\\\\\"mint failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function redeem(uint256 redeemTokens) external returns (uint256) {\\\\n        require(redeemInternal(redeemTokens, false) == 0, \\\\\\"redeem failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\\\n     * @param redeemAmount The amount of underlying to redeem\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256) {\\\\n        require(redeemUnderlyingInternal(redeemAmount, false) == 0, \\\\\\"redeem underlying failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Sender borrows assets from the protocol to their own address\\\\n     * @param borrowAmount The amount of the underlying asset to borrow\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function borrow(uint256 borrowAmount) external returns (uint256) {\\\\n        require(borrowInternal(borrowAmount, false) == 0, \\\\\\"borrow failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Sender repays their own borrow\\\\n     * @param repayAmount The amount to repay\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function repayBorrow(uint256 repayAmount) external returns (uint256) {\\\\n        (uint256 err, ) = repayBorrowInternal(repayAmount, false);\\\\n        require(err == 0, \\\\\\"repay failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Sender repays a borrow belonging to borrower\\\\n     * @param borrower the account with the debt being payed off\\\\n     * @param repayAmount The amount to repay\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256) {\\\\n        (uint256 err, ) = repayBorrowBehalfInternal(borrower, repayAmount, false);\\\\n        require(err == 0, \\\\\\"repay behalf failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice The sender liquidates the borrowers collateral.\\\\n     *  The collateral seized is transferred to the liquidator.\\\\n     * @param borrower The borrower of this cToken to be liquidated\\\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function liquidateBorrow(\\\\n        address borrower,\\\\n        uint256 repayAmount,\\\\n        CTokenInterface cTokenCollateral\\\\n    ) external returns (uint256) {\\\\n        (uint256 err, ) = liquidateBorrowInternal(borrower, repayAmount, cTokenCollateral, false);\\\\n        require(err == 0, \\\\\\"liquidate borrow failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice The sender adds to reserves.\\\\n     * @param addAmount The amount fo underlying token to add as reserves\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function _addReserves(uint256 addAmount) external returns (uint256) {\\\\n        require(_addReservesInternal(addAmount, false) == 0, \\\\\\"add reserves failed\\\\\\");\\\\n    }\\\\n\\\\n    /*** Safe Token ***/\\\\n\\\\n    /**\\\\n     * @notice Gets balance of this contract in terms of the underlying\\\\n     * @dev This excludes the value of the current message, if any\\\\n     * @return The quantity of underlying tokens owned by this contract\\\\n     */\\\\n    function getCashPrior() internal view returns (uint256) {\\\\n        EIP20Interface token = EIP20Interface(underlying);\\\\n        return token.balanceOf(address(this));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\\\\n     *      This will revert due to insufficient balance or insufficient allowance.\\\\n     *      This function returns the actual amount received,\\\\n     *      which may be less than `amount` if there is a fee attached to the transfer.\\\\n     *\\\\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\\\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\\\n     */\\\\n    function doTransferIn(\\\\n        address from,\\\\n        uint256 amount,\\\\n        bool isNative\\\\n    ) internal returns (uint256) {\\\\n        isNative; // unused\\\\n\\\\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\\\\n        uint256 balanceBefore = EIP20Interface(underlying).balanceOf(address(this));\\\\n        token.transferFrom(from, address(this), amount);\\\\n\\\\n        bool success;\\\\n        assembly {\\\\n            switch returndatasize()\\\\n            case 0 {\\\\n                // This is a non-standard ERC-20\\\\n                success := not(0) // set success to true\\\\n            }\\\\n            case 32 {\\\\n                // This is a compliant ERC-20\\\\n                returndatacopy(0, 0, 32)\\\\n                success := mload(0) // Set `success = returndata` of external call\\\\n            }\\\\n            default {\\\\n                // This is an excessively non-compliant ERC-20, revert.\\\\n                revert(0, 0)\\\\n            }\\\\n        }\\\\n        require(success, \\\\\\"transfer failed\\\\\\");\\\\n\\\\n        // Calculate the amount that was *actually* transferred\\\\n        uint256 balanceAfter = EIP20Interface(underlying).balanceOf(address(this));\\\\n        return sub_(balanceAfter, balanceBefore);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\\\\n     *      error code rather than reverting. If caller has not called checked protocol\'s balance, this may revert due to\\\\n     *      insufficient cash held in this contract. If caller has checked protocol\'s balance prior to this call, and verified\\\\n     *      it is >= amount, this should not revert in normal conditions.\\\\n     *\\\\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\\\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\\\n     */\\\\n    function doTransferOut(\\\\n        address payable to,\\\\n        uint256 amount,\\\\n        bool isNative\\\\n    ) internal {\\\\n        isNative; // unused\\\\n\\\\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\\\\n        token.transfer(to, amount);\\\\n\\\\n        bool success;\\\\n        assembly {\\\\n            switch returndatasize()\\\\n            case 0 {\\\\n                // This is a non-standard ERC-20\\\\n                success := not(0) // set success to true\\\\n            }\\\\n            case 32 {\\\\n                // This is a complaint ERC-20\\\\n                returndatacopy(0, 0, 32)\\\\n                success := mload(0) // Set `success = returndata` of external call\\\\n            }\\\\n            default {\\\\n                // This is an excessively non-compliant ERC-20, revert.\\\\n                revert(0, 0)\\\\n            }\\\\n        }\\\\n        require(success, \\\\\\"transfer failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\\\n     * @dev Called by both `transfer` and `transferFrom` internally\\\\n     * @param spender The address of the account performing the transfer\\\\n     * @param src The address of the source account\\\\n     * @param dst The address of the destination account\\\\n     * @param tokens The number of tokens to transfer\\\\n     * @return Whether or not the transfer succeeded\\\\n     */\\\\n    function transferTokens(\\\\n        address spender,\\\\n        address src,\\\\n        address dst,\\\\n        uint256 tokens\\\\n    ) internal returns (uint256) {\\\\n        /* Fail if transfer not allowed */\\\\n        require(comptroller.transferAllowed(address(this), src, dst, tokens) == 0, \\\\\\"rejected\\\\\\");\\\\n\\\\n        /* Do not allow self-transfers */\\\\n        require(src != dst, \\\\\\"bad input\\\\\\");\\\\n\\\\n        /* Get the allowance, infinite for the account owner */\\\\n        uint256 startingAllowance = 0;\\\\n        if (spender == src) {\\\\n            startingAllowance = uint256(-1);\\\\n        } else {\\\\n            startingAllowance = transferAllowances[src][spender];\\\\n        }\\\\n\\\\n        /* Do the calculations, checking for {under,over}flow */\\\\n        accountTokens[src] = sub_(accountTokens[src], tokens);\\\\n        accountTokens[dst] = add_(accountTokens[dst], tokens);\\\\n\\\\n        /* Eat some of the allowance (if necessary) */\\\\n        if (startingAllowance != uint256(-1)) {\\\\n            transferAllowances[src][spender] = sub_(startingAllowance, tokens);\\\\n        }\\\\n\\\\n        /* We emit a Transfer event */\\\\n        emit Transfer(src, dst, tokens);\\\\n\\\\n        comptroller.transferVerify(address(this), src, dst, tokens);\\\\n\\\\n        return uint256(Error.NO_ERROR);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Get the account\'s cToken balances\\\\n     * @param account The address of the account\\\\n     */\\\\n    function getCTokenBalanceInternal(address account) internal view returns (uint256) {\\\\n        return accountTokens[account];\\\\n    }\\\\n\\\\n    struct MintLocalVars {\\\\n        uint256 exchangeRateMantissa;\\\\n        uint256 mintTokens;\\\\n        uint256 actualMintAmount;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\\\n     * @dev Assumes interest has already been accrued up to the current block\\\\n     * @param minter The address of the account which is supplying the assets\\\\n     * @param mintAmount The amount of the underlying asset to supply\\\\n     * @param isNative The amount is in native or not\\\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\\\n     */\\\\n    function mintFresh(\\\\n        address minter,\\\\n        uint256 mintAmount,\\\\n        bool isNative\\\\n    ) internal returns (uint256, uint256) {\\\\n        /* Fail if mint not allowed */\\\\n        require(comptroller.mintAllowed(address(this), minter, mintAmount) == 0, \\\\\\"rejected\\\\\\");\\\\n\\\\n        /*\\\\n         * Return if mintAmount is zero.\\\\n         * Put behind `mintAllowed` for accuring potential COMP rewards.\\\\n         */\\\\n        if (mintAmount == 0) {\\\\n            return (uint256(Error.NO_ERROR), 0);\\\\n        }\\\\n\\\\n        /* Verify market\'s block number equals current block number */\\\\n        require(accrualBlockNumber == getBlockNumber(), \\\\\\"market is stale\\\\\\");\\\\n\\\\n        MintLocalVars memory vars;\\\\n\\\\n        vars.exchangeRateMantissa = exchangeRateStoredInternal();\\\\n\\\\n        /////////////////////////\\\\n        // EFFECTS & INTERACTIONS\\\\n        // (No safe failures beyond this point)\\\\n\\\\n        /*\\\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\\\n         *  `doTransferIn` reverts if anything goes wrong, since we can\'t be sure if\\\\n         *  side-effects occurred. The function returns the amount actually transferred,\\\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\\\n         *  of cash.\\\\n         */\\\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount, isNative);\\\\n\\\\n        /*\\\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\\\n         *  mintTokens = actualMintAmount / exchangeRate\\\\n         */\\\\n        vars.mintTokens = div_ScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\\\n\\\\n        /*\\\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\\\n         *  totalSupply = totalSupply + mintTokens\\\\n         *  accountTokens[minter] = accountTokens[minter] + mintTokens\\\\n         */\\\\n        totalSupply = add_(totalSupply, vars.mintTokens);\\\\n        accountTokens[minter] = add_(accountTokens[minter], vars.mintTokens);\\\\n\\\\n        /* We emit a Mint event, and a Transfer event */\\\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\\\n        emit Transfer(address(this), minter, vars.mintTokens);\\\\n\\\\n        /* We call the defense hook */\\\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\\\n\\\\n        return (uint256(Error.NO_ERROR), vars.actualMintAmount);\\\\n    }\\\\n\\\\n    struct RedeemLocalVars {\\\\n        uint256 exchangeRateMantissa;\\\\n        uint256 redeemTokens;\\\\n        uint256 redeemAmount;\\\\n        uint256 totalSupplyNew;\\\\n        uint256 accountTokensNew;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice User redeems cTokens in exchange for the underlying asset\\\\n     * @dev Assumes interest has already been accrued up to the current block. Only one of redeemTokensIn or redeemAmountIn may be non-zero and it would do nothing if both are zero.\\\\n     * @param redeemer The address of the account which is redeeming the tokens\\\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying\\\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens\\\\n     * @param isNative The amount is in native or not\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function redeemFresh(\\\\n        address payable redeemer,\\\\n        uint256 redeemTokensIn,\\\\n        uint256 redeemAmountIn,\\\\n        bool isNative\\\\n    ) internal returns (uint256) {\\\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\\\\"bad input\\\\\\");\\\\n\\\\n        RedeemLocalVars memory vars;\\\\n\\\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\\\n        vars.exchangeRateMantissa = exchangeRateStoredInternal();\\\\n\\\\n        /* If redeemTokensIn > 0: */\\\\n        if (redeemTokensIn > 0) {\\\\n            /*\\\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\\\n             *  redeemTokens = redeemTokensIn\\\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\\\n             */\\\\n            vars.redeemTokens = redeemTokensIn;\\\\n            vars.redeemAmount = mul_ScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\\\\n        } else {\\\\n            /*\\\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\\\n             *  redeemAmount = redeemAmountIn\\\\n             */\\\\n            vars.redeemTokens = div_ScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\\\\n            vars.redeemAmount = redeemAmountIn;\\\\n        }\\\\n\\\\n        /* Fail if redeem not allowed */\\\\n        require(comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens) == 0, \\\\\\"rejected\\\\\\");\\\\n\\\\n        /*\\\\n         * Return if redeemTokensIn and redeemAmountIn are zero.\\\\n         * Put behind `redeemAllowed` for accuring potential COMP rewards.\\\\n         */\\\\n        if (redeemTokensIn == 0 && redeemAmountIn == 0) {\\\\n            return uint256(Error.NO_ERROR);\\\\n        }\\\\n\\\\n        /* Verify market\'s block number equals current block number */\\\\n        require(accrualBlockNumber == getBlockNumber(), \\\\\\"market is stale\\\\\\");\\\\n\\\\n        /*\\\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\\\n         *  totalSupplyNew = totalSupply - redeemTokens\\\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\\\n         */\\\\n        vars.totalSupplyNew = sub_(totalSupply, vars.redeemTokens);\\\\n        vars.accountTokensNew = sub_(accountTokens[redeemer], vars.redeemTokens);\\\\n\\\\n        /* Reverts if protocol has insufficient cash */\\\\n        require(getCashPrior() >= vars.redeemAmount, \\\\\\"insufficient cash\\\\\\");\\\\n\\\\n        /////////////////////////\\\\n        // EFFECTS & INTERACTIONS\\\\n        // (No safe failures beyond this point)\\\\n\\\\n        /* We write previously calculated values into storage */\\\\n        totalSupply = vars.totalSupplyNew;\\\\n        accountTokens[redeemer] = vars.accountTokensNew;\\\\n\\\\n        /*\\\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\\\n         *  On success, the cToken has redeemAmount less of cash.\\\\n         *  doTransferOut reverts if anything goes wrong, since we can\'t be sure if side effects occurred.\\\\n         */\\\\n        doTransferOut(redeemer, vars.redeemAmount, isNative);\\\\n\\\\n        /* We emit a Transfer event, and a Redeem event */\\\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\\\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\\\n\\\\n        /* We call the defense hook */\\\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\\\n\\\\n        return uint256(Error.NO_ERROR);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\\\n     * @param liquidator The account receiving seized collateral\\\\n     * @param borrower The account having collateral seized\\\\n     * @param seizeTokens The number of cTokens to seize\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function seizeInternal(\\\\n        address seizerToken,\\\\n        address liquidator,\\\\n        address borrower,\\\\n        uint256 seizeTokens\\\\n    ) internal returns (uint256) {\\\\n        /* Fail if seize not allowed */\\\\n        require(\\\\n            comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens) == 0,\\\\n            \\\\\\"rejected\\\\\\"\\\\n        );\\\\n\\\\n        /*\\\\n         * Return if seizeTokens is zero.\\\\n         * Put behind `seizeAllowed` for accuring potential COMP rewards.\\\\n         */\\\\n        if (seizeTokens == 0) {\\\\n            return uint256(Error.NO_ERROR);\\\\n        }\\\\n\\\\n        /* Fail if borrower = liquidator */\\\\n        require(borrower != liquidator, \\\\\\"invalid account pair\\\\\\");\\\\n\\\\n        /*\\\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\\\n         */\\\\n        accountTokens[borrower] = sub_(accountTokens[borrower], seizeTokens);\\\\n        accountTokens[liquidator] = add_(accountTokens[liquidator], seizeTokens);\\\\n\\\\n        /* Emit a Transfer event */\\\\n        emit Transfer(borrower, liquidator, seizeTokens);\\\\n\\\\n        /* We call the defense hook */\\\\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\\\n\\\\n        return uint256(Error.NO_ERROR);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xfde9d7f7cd5f69af99b710b8e12e1a0735970b07b38edfeebc9b6ec25a63dabf\\"},\\"contracts/CToken.sol\\":{\\"content\\":\\"pragma solidity ^0.5.16;\\\\n\\\\nimport \\\\\\"./ComptrollerInterface.sol\\\\\\";\\\\nimport \\\\\\"./CTokenInterfaces.sol\\\\\\";\\\\nimport \\\\\\"./ErrorReporter.sol\\\\\\";\\\\nimport \\\\\\"./Exponential.sol\\\\\\";\\\\nimport \\\\\\"./EIP20Interface.sol\\\\\\";\\\\nimport \\\\\\"./EIP20NonStandardInterface.sol\\\\\\";\\\\nimport \\\\\\"./InterestRateModel.sol\\\\\\";\\\\n\\\\n/**\\\\n * @title Compound\'s CToken Contract\\\\n * @notice Abstract base for CTokens\\\\n * @author Compound\\\\n */\\\\ncontract CToken is CTokenInterface, Exponential, TokenErrorReporter {\\\\n    /**\\\\n     * @notice Initialize the money market\\\\n     * @param comptroller_ The address of the Comptroller\\\\n     * @param interestRateModel_ The address of the interest rate model\\\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\\\n     * @param name_ EIP-20 name of this token\\\\n     * @param symbol_ EIP-20 symbol of this token\\\\n     * @param decimals_ EIP-20 decimal precision of this token\\\\n     */\\\\n    function initialize(\\\\n        ComptrollerInterface comptroller_,\\\\n        InterestRateModel interestRateModel_,\\\\n        uint256 initialExchangeRateMantissa_,\\\\n        string memory name_,\\\\n        string memory symbol_,\\\\n        uint8 decimals_\\\\n    ) public {\\\\n        require(msg.sender == admin, \\\\\\"admin only\\\\\\");\\\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\\\\"initialized\\\\\\");\\\\n\\\\n        // Set initial exchange rate\\\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\\\n        require(initialExchangeRateMantissa > 0, \\\\\\"invalid exchange rate\\\\\\");\\\\n\\\\n        // Set the comptroller\\\\n        uint256 err = _setComptroller(comptroller_);\\\\n        require(err == uint256(Error.NO_ERROR), \\\\\\"failed to set comptroller\\\\\\");\\\\n\\\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\\\n        accrualBlockNumber = getBlockNumber();\\\\n        borrowIndex = mantissaOne;\\\\n\\\\n        // Set the interest rate model (depends on block number / borrow index)\\\\n        err = _setInterestRateModelFresh(interestRateModel_);\\\\n        require(err == uint256(Error.NO_ERROR), \\\\\\"failed to set IRM\\\\\\");\\\\n\\\\n        name = name_;\\\\n        symbol = symbol_;\\\\n        decimals = decimals_;\\\\n\\\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\\\n        _notEntered = true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\\\n     * @param dst The address of the destination account\\\\n     * @param amount The number of tokens to transfer\\\\n     * @return Whether or not the transfer succeeded\\\\n     */\\\\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\\\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint256(Error.NO_ERROR);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\\\n     * @param src The address of the source account\\\\n     * @param dst The address of the destination account\\\\n     * @param amount The number of tokens to transfer\\\\n     * @return Whether or not the transfer succeeded\\\\n     */\\\\n    function transferFrom(\\\\n        address src,\\\\n        address dst,\\\\n        uint256 amount\\\\n    ) external nonReentrant returns (bool) {\\\\n        return transferTokens(msg.sender, src, dst, amount) == uint256(Error.NO_ERROR);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\\\n     * @dev This will overwrite the approval amount for `spender`\\\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\\\n     * @param spender The address of the account which may transfer tokens\\\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\\\n     * @return Whether or not the approval succeeded\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool) {\\\\n        address src = msg.sender;\\\\n        transferAllowances[src][spender] = amount;\\\\n        emit Approval(src, spender, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Get the current allowance from `owner` for `spender`\\\\n     * @param owner The address of the account which owns the tokens to be spent\\\\n     * @param spender The address of the account which may transfer tokens\\\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256) {\\\\n        return transferAllowances[owner][spender];\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Get the token balance of the `owner`\\\\n     * @param owner The address of the account to query\\\\n     * @return The number of tokens owned by `owner`\\\\n     */\\\\n    function balanceOf(address owner) external view returns (uint256) {\\\\n        return accountTokens[owner];\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Get the underlying balance of the `owner`\\\\n     * @dev This also accrues interest in a transaction\\\\n     * @param owner The address of the account to query\\\\n     * @return The amount of underlying owned by `owner`\\\\n     */\\\\n    function balanceOfUnderlying(address owner) external returns (uint256) {\\\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\\\n        return mul_ScalarTruncate(exchangeRate, accountTokens[owner]);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Get a snapshot of the account\'s balances, and the cached exchange rate\\\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\\\n     * @param account Address of the account to snapshot\\\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\\\n     */\\\\n    function getAccountSnapshot(address account)\\\\n        external\\\\n        view\\\\n        returns (\\\\n            uint256,\\\\n            uint256,\\\\n            uint256,\\\\n            uint256\\\\n        )\\\\n    {\\\\n        uint256 cTokenBalance = getCTokenBalanceInternal(account);\\\\n        uint256 borrowBalance = borrowBalanceStoredInternal(account);\\\\n        uint256 exchangeRateMantissa = exchangeRateStoredInternal();\\\\n\\\\n        return (uint256(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Function to simply retrieve block number\\\\n     *  This exists mainly for inheriting test contracts to stub this result.\\\\n     */\\\\n    function getBlockNumber() internal view returns (uint256) {\\\\n        return block.timestamp;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\\\n     * @return The borrow interest rate per block, scaled by 1e18\\\\n     */\\\\n    function borrowRatePerBlock() external view returns (uint256) {\\\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Returns the current per-block supply interest rate for this cToken\\\\n     * @return The supply interest rate per block, scaled by 1e18\\\\n     */\\\\n    function supplyRatePerBlock() external view returns (uint256) {\\\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Returns the estimated per-block borrow interest rate for this cToken after some change\\\\n     * @return The borrow interest rate per block, scaled by 1e18\\\\n     */\\\\n    function estimateBorrowRatePerBlockAfterChange(uint256 change, bool repay) external view returns (uint256) {\\\\n        uint256 cashPriorNew;\\\\n        uint256 totalBorrowsNew;\\\\n\\\\n        if (repay) {\\\\n            cashPriorNew = add_(getCashPrior(), change);\\\\n            totalBorrowsNew = sub_(totalBorrows, change);\\\\n        } else {\\\\n            cashPriorNew = sub_(getCashPrior(), change);\\\\n            totalBorrowsNew = add_(totalBorrows, change);\\\\n        }\\\\n        return interestRateModel.getBorrowRate(cashPriorNew, totalBorrowsNew, totalReserves);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Returns the estimated per-block supply interest rate for this cToken after some change\\\\n     * @return The supply interest rate per block, scaled by 1e18\\\\n     */\\\\n    function estimateSupplyRatePerBlockAfterChange(uint256 change, bool repay) external view returns (uint256) {\\\\n        uint256 cashPriorNew;\\\\n        uint256 totalBorrowsNew;\\\\n\\\\n        if (repay) {\\\\n            cashPriorNew = add_(getCashPrior(), change);\\\\n            totalBorrowsNew = sub_(totalBorrows, change);\\\\n        } else {\\\\n            cashPriorNew = sub_(getCashPrior(), change);\\\\n            totalBorrowsNew = add_(totalBorrows, change);\\\\n        }\\\\n\\\\n        return interestRateModel.getSupplyRate(cashPriorNew, totalBorrowsNew, totalReserves, reserveFactorMantissa);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Returns the current total borrows plus accrued interest\\\\n     * @return The total borrows with interest\\\\n     */\\\\n    function totalBorrowsCurrent() external nonReentrant returns (uint256) {\\\\n        accrueInterest();\\\\n        return totalBorrows;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Accrue interest to updated borrowIndex and then calculate account\'s borrow balance using the updated borrowIndex\\\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\\\n     * @return The calculated balance\\\\n     */\\\\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint256) {\\\\n        accrueInterest();\\\\n        return borrowBalanceStored(account);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Return the borrow balance of account based on stored data\\\\n     * @param account The address whose balance should be calculated\\\\n     * @return The calculated balance\\\\n     */\\\\n    function borrowBalanceStored(address account) public view returns (uint256) {\\\\n        return borrowBalanceStoredInternal(account);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Return the borrow balance of account based on stored data\\\\n     * @param account The address whose balance should be calculated\\\\n     * @return the calculated balance or 0 if error code is non-zero\\\\n     */\\\\n    function borrowBalanceStoredInternal(address account) internal view returns (uint256) {\\\\n        /* Get borrowBalance and borrowIndex */\\\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\\\n\\\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\\\n         */\\\\n        if (borrowSnapshot.principal == 0) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        /* Calculate new borrow balance using the interest index:\\\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\\\n         */\\\\n        uint256 principalTimesIndex = mul_(borrowSnapshot.principal, borrowIndex);\\\\n        uint256 result = div_(principalTimesIndex, borrowSnapshot.interestIndex);\\\\n        return result;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Accrue interest then return the up-to-date exchange rate\\\\n     * @return Calculated exchange rate scaled by 1e18\\\\n     */\\\\n    function exchangeRateCurrent() public nonReentrant returns (uint256) {\\\\n        accrueInterest();\\\\n        return exchangeRateStored();\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\\\n     * @dev This function does not accrue interest before calculating the exchange rate\\\\n     * @return Calculated exchange rate scaled by 1e18\\\\n     */\\\\n    function exchangeRateStored() public view returns (uint256) {\\\\n        return exchangeRateStoredInternal();\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\\\n     * @dev This function does not accrue interest before calculating the exchange rate\\\\n     * @return calculated exchange rate scaled by 1e18\\\\n     */\\\\n    function exchangeRateStoredInternal() internal view returns (uint256) {\\\\n        uint256 _totalSupply = totalSupply;\\\\n        if (_totalSupply == 0) {\\\\n            /*\\\\n             * If there are no tokens minted:\\\\n             *  exchangeRate = initialExchangeRate\\\\n             */\\\\n            return initialExchangeRateMantissa;\\\\n        } else {\\\\n            /*\\\\n             * Otherwise:\\\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\\\n             */\\\\n            uint256 totalCash = getCashPrior();\\\\n            uint256 cashPlusBorrowsMinusReserves = sub_(add_(totalCash, totalBorrows), totalReserves);\\\\n            uint256 exchangeRate = div_(cashPlusBorrowsMinusReserves, Exp({mantissa: _totalSupply}));\\\\n            return exchangeRate;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Get cash balance of this cToken in the underlying asset\\\\n     * @return The quantity of underlying asset owned by this contract\\\\n     */\\\\n    function getCash() external view returns (uint256) {\\\\n        return getCashPrior();\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Applies accrued interest to total borrows and reserves\\\\n     * @dev This calculates interest accrued from the last checkpointed block\\\\n     *   up to the current block and writes new checkpoint to storage.\\\\n     */\\\\n    function accrueInterest() public returns (uint256) {\\\\n        /* Remember the initial block number */\\\\n        uint256 currentBlockNumber = getBlockNumber();\\\\n        uint256 accrualBlockNumberPrior = accrualBlockNumber;\\\\n\\\\n        /* Short-circuit accumulating 0 interest */\\\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\\\n            return uint256(Error.NO_ERROR);\\\\n        }\\\\n\\\\n        /* Read the previous values out of storage */\\\\n        uint256 cashPrior = getCashPrior();\\\\n        uint256 borrowsPrior = totalBorrows;\\\\n        uint256 reservesPrior = totalReserves;\\\\n        uint256 borrowIndexPrior = borrowIndex;\\\\n\\\\n        /* Calculate the current borrow interest rate */\\\\n        uint256 borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\\\\"borrow rate too high\\\\\\");\\\\n\\\\n        /* Calculate the number of blocks elapsed since the last accrual */\\\\n        uint256 blockDelta = sub_(currentBlockNumber, accrualBlockNumberPrior);\\\\n\\\\n        /*\\\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\\\n         *  simpleInterestFactor = borrowRate * blockDelta\\\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\\\n         */\\\\n\\\\n        Exp memory simpleInterestFactor = mul_(Exp({mantissa: borrowRateMantissa}), blockDelta);\\\\n        uint256 interestAccumulated = mul_ScalarTruncate(simpleInterestFactor, borrowsPrior);\\\\n        uint256 totalBorrowsNew = add_(interestAccumulated, borrowsPrior);\\\\n        uint256 totalReservesNew = mul_ScalarTruncateAddUInt(\\\\n            Exp({mantissa: reserveFactorMantissa}),\\\\n            interestAccumulated,\\\\n            reservesPrior\\\\n        );\\\\n        uint256 borrowIndexNew = mul_ScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\\\n\\\\n        /////////////////////////\\\\n        // EFFECTS & INTERACTIONS\\\\n        // (No safe failures beyond this point)\\\\n\\\\n        /* We write the previously calculated values into storage */\\\\n        accrualBlockNumber = currentBlockNumber;\\\\n        borrowIndex = borrowIndexNew;\\\\n        totalBorrows = totalBorrowsNew;\\\\n        totalReserves = totalReservesNew;\\\\n\\\\n        /* We emit an AccrueInterest event */\\\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\\\n\\\\n        return uint256(Error.NO_ERROR);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\\\n     * @param mintAmount The amount of the underlying asset to supply\\\\n     * @param isNative The amount is in native or not\\\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\\\n     */\\\\n    function mintInternal(uint256 mintAmount, bool isNative) internal nonReentrant returns (uint256, uint256) {\\\\n        accrueInterest();\\\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don\'t need to\\\\n        return mintFresh(msg.sender, mintAmount, isNative);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\\\n     * @param isNative The amount is in native or not\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function redeemInternal(uint256 redeemTokens, bool isNative) internal nonReentrant returns (uint256) {\\\\n        accrueInterest();\\\\n        // redeemFresh emits redeem-specific logs on errors, so we don\'t need to\\\\n        return redeemFresh(msg.sender, redeemTokens, 0, isNative);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\\\n     * @param isNative The amount is in native or not\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function redeemUnderlyingInternal(uint256 redeemAmount, bool isNative) internal nonReentrant returns (uint256) {\\\\n        accrueInterest();\\\\n        // redeemFresh emits redeem-specific logs on errors, so we don\'t need to\\\\n        return redeemFresh(msg.sender, 0, redeemAmount, isNative);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Sender borrows assets from the protocol to their own address\\\\n     * @param borrowAmount The amount of the underlying asset to borrow\\\\n     * @param isNative The amount is in native or not\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function borrowInternal(uint256 borrowAmount, bool isNative) internal nonReentrant returns (uint256) {\\\\n        accrueInterest();\\\\n        // borrowFresh emits borrow-specific logs on errors, so we don\'t need to\\\\n        return borrowFresh(msg.sender, borrowAmount, isNative);\\\\n    }\\\\n\\\\n    struct BorrowLocalVars {\\\\n        MathError mathErr;\\\\n        uint256 accountBorrows;\\\\n        uint256 accountBorrowsNew;\\\\n        uint256 totalBorrowsNew;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Users borrow assets from the protocol to their own address\\\\n     * @param borrowAmount The amount of the underlying asset to borrow\\\\n     * @param isNative The amount is in native or not\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function borrowFresh(\\\\n        address payable borrower,\\\\n        uint256 borrowAmount,\\\\n        bool isNative\\\\n    ) internal returns (uint256) {\\\\n        /* Fail if borrow not allowed */\\\\n        require(comptroller.borrowAllowed(address(this), borrower, borrowAmount) == 0, \\\\\\"rejected\\\\\\");\\\\n\\\\n        /* Verify market\'s block number equals current block number */\\\\n        require(accrualBlockNumber == getBlockNumber(), \\\\\\"market is stale\\\\\\");\\\\n\\\\n        /* Reverts if protocol has insufficient cash */\\\\n        require(getCashPrior() >= borrowAmount, \\\\\\"insufficient cash\\\\\\");\\\\n\\\\n        BorrowLocalVars memory vars;\\\\n\\\\n        /*\\\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\\\n         */\\\\n        vars.accountBorrows = borrowBalanceStoredInternal(borrower);\\\\n        vars.accountBorrowsNew = add_(vars.accountBorrows, borrowAmount);\\\\n        vars.totalBorrowsNew = add_(totalBorrows, borrowAmount);\\\\n\\\\n        /////////////////////////\\\\n        // EFFECTS & INTERACTIONS\\\\n        // (No safe failures beyond this point)\\\\n\\\\n        /* We write the previously calculated values into storage */\\\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\\\n        totalBorrows = vars.totalBorrowsNew;\\\\n\\\\n        /*\\\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\\\n         *  On success, the cToken borrowAmount less of cash.\\\\n         *  doTransferOut reverts if anything goes wrong, since we can\'t be sure if side effects occurred.\\\\n         */\\\\n        doTransferOut(borrower, borrowAmount, isNative);\\\\n\\\\n        /* We emit a Borrow event */\\\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\\\n\\\\n        /* We call the defense hook */\\\\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\\\\n\\\\n        return uint256(Error.NO_ERROR);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Sender repays their own borrow\\\\n     * @param repayAmount The amount to repay\\\\n     * @param isNative The amount is in native or not\\\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\\\n     */\\\\n    function repayBorrowInternal(uint256 repayAmount, bool isNative) internal nonReentrant returns (uint256, uint256) {\\\\n        accrueInterest();\\\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don\'t need to\\\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount, isNative);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Sender repays a borrow belonging to borrower\\\\n     * @param borrower the account with the debt being payed off\\\\n     * @param repayAmount The amount to repay\\\\n     * @param isNative The amount is in native or not\\\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\\\n     */\\\\n    function repayBorrowBehalfInternal(\\\\n        address borrower,\\\\n        uint256 repayAmount,\\\\n        bool isNative\\\\n    ) internal nonReentrant returns (uint256, uint256) {\\\\n        accrueInterest();\\\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don\'t need to\\\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount, isNative);\\\\n    }\\\\n\\\\n    struct RepayBorrowLocalVars {\\\\n        Error err;\\\\n        MathError mathErr;\\\\n        uint256 repayAmount;\\\\n        uint256 borrowerIndex;\\\\n        uint256 accountBorrows;\\\\n        uint256 accountBorrowsNew;\\\\n        uint256 totalBorrowsNew;\\\\n        uint256 actualRepayAmount;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\\\n     * @param payer the account paying off the borrow\\\\n     * @param borrower the account with the debt being payed off\\\\n     * @param repayAmount the amount of undelrying tokens being returned\\\\n     * @param isNative The amount is in native or not\\\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\\\n     */\\\\n    function repayBorrowFresh(\\\\n        address payer,\\\\n        address borrower,\\\\n        uint256 repayAmount,\\\\n        bool isNative\\\\n    ) internal returns (uint256, uint256) {\\\\n        /* Fail if repayBorrow not allowed */\\\\n        require(comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount) == 0, \\\\\\"rejected\\\\\\");\\\\n\\\\n        /* Verify market\'s block number equals current block number */\\\\n        require(accrualBlockNumber == getBlockNumber(), \\\\\\"market is stale\\\\\\");\\\\n\\\\n        RepayBorrowLocalVars memory vars;\\\\n\\\\n        /* We remember the original borrowerIndex for verification purposes */\\\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\\\n\\\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\\\n        vars.accountBorrows = borrowBalanceStoredInternal(borrower);\\\\n\\\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\\\n        if (repayAmount == uint256(-1)) {\\\\n            vars.repayAmount = vars.accountBorrows;\\\\n        } else {\\\\n            vars.repayAmount = repayAmount;\\\\n        }\\\\n\\\\n        /////////////////////////\\\\n        // EFFECTS & INTERACTIONS\\\\n        // (No safe failures beyond this point)\\\\n\\\\n        /*\\\\n         * We call doTransferIn for the payer and the repayAmount\\\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\\\n         *  On success, the cToken holds an additional repayAmount of cash.\\\\n         *  doTransferIn reverts if anything goes wrong, since we can\'t be sure if side effects occurred.\\\\n         *   it returns the amount actually transferred, in case of a fee.\\\\n         */\\\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount, isNative);\\\\n\\\\n        /*\\\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\\\n         */\\\\n        vars.accountBorrowsNew = sub_(vars.accountBorrows, vars.actualRepayAmount);\\\\n        vars.totalBorrowsNew = sub_(totalBorrows, vars.actualRepayAmount);\\\\n\\\\n        /* We write the previously calculated values into storage */\\\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\\\n        totalBorrows = vars.totalBorrowsNew;\\\\n\\\\n        /* We emit a RepayBorrow event */\\\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\\\n\\\\n        /* We call the defense hook */\\\\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\\\n\\\\n        return (uint256(Error.NO_ERROR), vars.actualRepayAmount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice The sender liquidates the borrowers collateral.\\\\n     *  The collateral seized is transferred to the liquidator.\\\\n     * @param borrower The borrower of this cToken to be liquidated\\\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\\\n     * @param isNative The amount is in native or not\\\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\\\n     */\\\\n    function liquidateBorrowInternal(\\\\n        address borrower,\\\\n        uint256 repayAmount,\\\\n        CTokenInterface cTokenCollateral,\\\\n        bool isNative\\\\n    ) internal nonReentrant returns (uint256, uint256) {\\\\n        accrueInterest();\\\\n        require(cTokenCollateral.accrueInterest() == uint256(Error.NO_ERROR), \\\\\\"accrue interest failed\\\\\\");\\\\n\\\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don\'t need to\\\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral, isNative);\\\\n    }\\\\n\\\\n    struct LiquidateBorrowLocalVars {\\\\n        uint256 repayBorrowError;\\\\n        uint256 actualRepayAmount;\\\\n        uint256 amountSeizeError;\\\\n        uint256 seizeTokens;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice The liquidator liquidates the borrowers collateral.\\\\n     *  The collateral seized is transferred to the liquidator.\\\\n     * @param borrower The borrower of this cToken to be liquidated\\\\n     * @param liquidator The address repaying the borrow and seizing collateral\\\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\\\n     * @param isNative The amount is in native or not\\\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\\\n     */\\\\n    function liquidateBorrowFresh(\\\\n        address liquidator,\\\\n        address borrower,\\\\n        uint256 repayAmount,\\\\n        CTokenInterface cTokenCollateral,\\\\n        bool isNative\\\\n    ) internal returns (uint256, uint256) {\\\\n        /* Fail if liquidate not allowed */\\\\n        require(\\\\n            comptroller.liquidateBorrowAllowed(\\\\n                address(this),\\\\n                address(cTokenCollateral),\\\\n                liquidator,\\\\n                borrower,\\\\n                repayAmount\\\\n            ) == 0,\\\\n            \\\\\\"rejected\\\\\\"\\\\n        );\\\\n\\\\n        /* Verify market\'s block number equals current block number */\\\\n        require(accrualBlockNumber == getBlockNumber(), \\\\\\"market is stale\\\\\\");\\\\n\\\\n        /* Verify cTokenCollateral market\'s block number equals current block number */\\\\n        require(cTokenCollateral.accrualBlockNumber() == getBlockNumber(), \\\\\\"market is stale\\\\\\");\\\\n\\\\n        /* Fail if borrower = liquidator */\\\\n        require(borrower != liquidator, \\\\\\"invalid account pair\\\\\\");\\\\n\\\\n        /* Fail if repayAmount = 0 or repayAmount = -1 */\\\\n        require(repayAmount > 0 && repayAmount != uint256(-1), \\\\\\"invalid close amount requested\\\\\\");\\\\n\\\\n        LiquidateBorrowLocalVars memory vars;\\\\n\\\\n        /* Fail if repayBorrow fails */\\\\n        (vars.repayBorrowError, vars.actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount, isNative);\\\\n        require(vars.repayBorrowError == uint256(Error.NO_ERROR), \\\\\\"repay borrow failed\\\\\\");\\\\n\\\\n        /////////////////////////\\\\n        // EFFECTS & INTERACTIONS\\\\n        // (No safe failures beyond this point)\\\\n\\\\n        /* We calculate the number of collateral tokens that will be seized */\\\\n        (vars.amountSeizeError, vars.seizeTokens) = comptroller.liquidateCalculateSeizeTokens(\\\\n            address(this),\\\\n            address(cTokenCollateral),\\\\n            vars.actualRepayAmount\\\\n        );\\\\n        require(vars.amountSeizeError == uint256(Error.NO_ERROR), \\\\\\"failed to calculate seize amount\\\\\\");\\\\n\\\\n        /* Revert if borrower collateral token balance < seizeTokens */\\\\n        require(cTokenCollateral.balanceOf(borrower) >= vars.seizeTokens, \\\\\\"LIQUIDATE_SEIZE_TOO_MUCH\\\\\\");\\\\n\\\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\\\n        uint256 seizeError;\\\\n        if (address(cTokenCollateral) == address(this)) {\\\\n            seizeError = seizeInternal(address(this), liquidator, borrower, vars.seizeTokens);\\\\n        } else {\\\\n            seizeError = cTokenCollateral.seize(liquidator, borrower, vars.seizeTokens);\\\\n        }\\\\n\\\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\\\n        require(seizeError == uint256(Error.NO_ERROR), \\\\\\"token seizure failed\\\\\\");\\\\n\\\\n        /* We emit a LiquidateBorrow event */\\\\n        emit LiquidateBorrow(liquidator, borrower, vars.actualRepayAmount, address(cTokenCollateral), vars.seizeTokens);\\\\n\\\\n        /* We call the defense hook */\\\\n        comptroller.liquidateBorrowVerify(\\\\n            address(this),\\\\n            address(cTokenCollateral),\\\\n            liquidator,\\\\n            borrower,\\\\n            vars.actualRepayAmount,\\\\n            vars.seizeTokens\\\\n        );\\\\n\\\\n        return (uint256(Error.NO_ERROR), vars.actualRepayAmount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\\\n     * @param liquidator The account receiving seized collateral\\\\n     * @param borrower The account having collateral seized\\\\n     * @param seizeTokens The number of cTokens to seize\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function seize(\\\\n        address liquidator,\\\\n        address borrower,\\\\n        uint256 seizeTokens\\\\n    ) external nonReentrant returns (uint256) {\\\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\\\n    }\\\\n\\\\n    /*** Admin Functions ***/\\\\n\\\\n    /**\\\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\\\n     * @param newPendingAdmin New pending admin.\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint256) {\\\\n        // Check caller = admin\\\\n        if (msg.sender != admin) {\\\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\\\n        }\\\\n\\\\n        // Save current value, if any, for inclusion in log\\\\n        address oldPendingAdmin = pendingAdmin;\\\\n\\\\n        // Store pendingAdmin with value newPendingAdmin\\\\n        pendingAdmin = newPendingAdmin;\\\\n\\\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\\\n\\\\n        return uint256(Error.NO_ERROR);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\\\n     * @dev Admin function for pending admin to accept role and update admin\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function _acceptAdmin() external returns (uint256) {\\\\n        // Check caller is pendingAdmin and pendingAdmin \\\\u2260 address(0)\\\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\\\n        }\\\\n\\\\n        // Save current values for inclusion in log\\\\n        address oldAdmin = admin;\\\\n        address oldPendingAdmin = pendingAdmin;\\\\n\\\\n        // Store admin with value pendingAdmin\\\\n        admin = pendingAdmin;\\\\n\\\\n        // Clear the pending value\\\\n        pendingAdmin = address(0);\\\\n\\\\n        emit NewAdmin(oldAdmin, admin);\\\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\\\n\\\\n        return uint256(Error.NO_ERROR);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Sets a new comptroller for the market\\\\n     * @dev Admin function to set a new comptroller\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint256) {\\\\n        // Check caller is admin\\\\n        if (msg.sender != admin) {\\\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\\\\n        }\\\\n\\\\n        ComptrollerInterface oldComptroller = comptroller;\\\\n        // Ensure invoke comptroller.isComptroller() returns true\\\\n        require(newComptroller.isComptroller(), \\\\\\"not comptroller\\\\\\");\\\\n\\\\n        // Set market\'s comptroller to newComptroller\\\\n        comptroller = newComptroller;\\\\n\\\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\\\n        emit NewComptroller(oldComptroller, newComptroller);\\\\n\\\\n        return uint256(Error.NO_ERROR);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\\\n     * @dev Admin function to accrue interest and set a new reserve factor\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function _setReserveFactor(uint256 newReserveFactorMantissa) external nonReentrant returns (uint256) {\\\\n        uint256 error = accrueInterest();\\\\n        if (error != uint256(Error.NO_ERROR)) {\\\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\\\n        }\\\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don\'t need to.\\\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\\\n     * @dev Admin function to set a new reserve factor\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function _setReserveFactorFresh(uint256 newReserveFactorMantissa) internal returns (uint256) {\\\\n        // Check caller is admin\\\\n        if (msg.sender != admin) {\\\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\\\n        }\\\\n\\\\n        // Verify market\'s block number equals current block number\\\\n        if (accrualBlockNumber != getBlockNumber()) {\\\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\\\n        }\\\\n\\\\n        // Check newReserveFactor \\\\u2264 maxReserveFactor\\\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\\\n        }\\\\n\\\\n        uint256 oldReserveFactorMantissa = reserveFactorMantissa;\\\\n        reserveFactorMantissa = newReserveFactorMantissa;\\\\n\\\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\\\n\\\\n        return uint256(Error.NO_ERROR);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\\\n     * @param addAmount Amount of addition to reserves\\\\n     * @param isNative The amount is in native or not\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function _addReservesInternal(uint256 addAmount, bool isNative) internal nonReentrant returns (uint256) {\\\\n        uint256 error = accrueInterest();\\\\n        if (error != uint256(Error.NO_ERROR)) {\\\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\\\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\\\\n        }\\\\n\\\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don\'t need to.\\\\n        (error, ) = _addReservesFresh(addAmount, isNative);\\\\n        return error;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Add reserves by transferring from caller\\\\n     * @dev Requires fresh interest accrual\\\\n     * @param addAmount Amount of addition to reserves\\\\n     * @param isNative The amount is in native or not\\\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\\\n     */\\\\n    function _addReservesFresh(uint256 addAmount, bool isNative) internal returns (uint256, uint256) {\\\\n        // totalReserves + actualAddAmount\\\\n        uint256 totalReservesNew;\\\\n        uint256 actualAddAmount;\\\\n\\\\n        // We fail gracefully unless market\'s block number equals current block number\\\\n        if (accrualBlockNumber != getBlockNumber()) {\\\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\\\n        }\\\\n\\\\n        /////////////////////////\\\\n        // EFFECTS & INTERACTIONS\\\\n        // (No safe failures beyond this point)\\\\n\\\\n        /*\\\\n         * We call doTransferIn for the caller and the addAmount\\\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\\\n         *  On success, the cToken holds an additional addAmount of cash.\\\\n         *  doTransferIn reverts if anything goes wrong, since we can\'t be sure if side effects occurred.\\\\n         *  it returns the amount actually transferred, in case of a fee.\\\\n         */\\\\n\\\\n        actualAddAmount = doTransferIn(msg.sender, addAmount, isNative);\\\\n\\\\n        totalReservesNew = add_(totalReserves, actualAddAmount);\\\\n\\\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\\\n        totalReserves = totalReservesNew;\\\\n\\\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\\\n\\\\n        /* Return (NO_ERROR, actualAddAmount) */\\\\n        return (uint256(Error.NO_ERROR), actualAddAmount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\\\n     * @param reduceAmount Amount of reduction to reserves\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function _reduceReserves(uint256 reduceAmount) external nonReentrant returns (uint256) {\\\\n        uint256 error = accrueInterest();\\\\n        if (error != uint256(Error.NO_ERROR)) {\\\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\\\n        }\\\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don\'t need to.\\\\n        return _reduceReservesFresh(reduceAmount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Reduces reserves by transferring to admin\\\\n     * @dev Requires fresh interest accrual\\\\n     * @param reduceAmount Amount of reduction to reserves\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function _reduceReservesFresh(uint256 reduceAmount) internal returns (uint256) {\\\\n        // totalReserves - reduceAmount\\\\n        uint256 totalReservesNew;\\\\n\\\\n        // Check caller is admin\\\\n        if (msg.sender != admin) {\\\\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\\\n        }\\\\n\\\\n        // We fail gracefully unless market\'s block number equals current block number\\\\n        if (accrualBlockNumber != getBlockNumber()) {\\\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\\\n        }\\\\n\\\\n        // Fail gracefully if protocol has insufficient underlying cash\\\\n        if (getCashPrior() < reduceAmount) {\\\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\\\n        }\\\\n\\\\n        // Check reduceAmount \\\\u2264 reserves[n] (totalReserves)\\\\n        if (reduceAmount > totalReserves) {\\\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\\\n        }\\\\n\\\\n        /////////////////////////\\\\n        // EFFECTS & INTERACTIONS\\\\n        // (No safe failures beyond this point)\\\\n\\\\n        totalReservesNew = sub_(totalReserves, reduceAmount);\\\\n\\\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\\\n        totalReserves = totalReservesNew;\\\\n\\\\n        // doTransferOut reverts if anything goes wrong, since we can\'t be sure if side effects occurred.\\\\n        // Restrict reducing reserves in wrapped token. Implementations except `CWrappedNative` won\'t use parameter `isNative`.\\\\n        doTransferOut(admin, reduceAmount, false);\\\\n\\\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\\\n\\\\n        return uint256(Error.NO_ERROR);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\\\n     * @dev Admin function to accrue interest and update the interest rate model\\\\n     * @param newInterestRateModel the new interest rate model to use\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint256) {\\\\n        uint256 error = accrueInterest();\\\\n        if (error != uint256(Error.NO_ERROR)) {\\\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\\\n        }\\\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don\'t need to.\\\\n        return _setInterestRateModelFresh(newInterestRateModel);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\\\n     * @dev Admin function to update the interest rate model\\\\n     * @param newInterestRateModel the new interest rate model to use\\\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\\\n     */\\\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint256) {\\\\n        // Used to store old model for use in the event that is emitted on success\\\\n        InterestRateModel oldInterestRateModel;\\\\n\\\\n        // Check caller is admin\\\\n        if (msg.sender != admin) {\\\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\\\n        }\\\\n\\\\n        // We fail gracefully unless market\'s block number equals current block number\\\\n        if (accrualBlockNumber != getBlockNumber()) {\\\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\\\n        }\\\\n\\\\n        // Track the market\'s current interest rate model\\\\n        oldInterestRateModel = interestRateModel;\\\\n\\\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\\\n        require(newInterestRateModel.isInterestRateModel(), \\\\\\"invalid IRM\\\\\\");\\\\n\\\\n        // Set the interest rate model to newInterestRateModel\\\\n        interestRateModel = newInterestRateModel;\\\\n\\\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\\\n\\\\n        return uint256(Error.NO_ERROR);\\\\n    }\\\\n\\\\n    /*** Safe Token ***/\\\\n\\\\n    /**\\\\n     * @notice Gets balance of this contract in terms of the underlying\\\\n     * @dev This excludes the value of the current message, if any\\\\n     * @return The quantity of underlying owned by this contract\\\\n     */\\\\n    function getCashPrior() internal view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\\\n     *  This may revert due to insufficient balance or insufficient allowance.\\\\n     */\\\\n    function doTransferIn(\\\\n        address from,\\\\n        uint256 amount,\\\\n        bool isNative\\\\n    ) internal returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\\\n     *  If caller has not called checked protocol\'s balance, may revert due to insufficient cash held in the contract.\\\\n     *  If caller has checked protocol\'s balance, and verified it is >= amount, this should not revert in normal conditions.\\\\n     */\\\\n    function doTransferOut(\\\\n        address payable to,\\\\n        uint256 amount,\\\\n        bool isNative\\\\n    ) internal;\\\\n\\\\n    /**\\\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\\\n     * @dev Called by both `transfer` and `transferFrom` internally\\\\n     */\\\\n    function transferTokens(\\\\n        address spender,\\\\n        address src,\\\\n        address dst,\\\\n        uint256 tokens\\\\n    ) internal returns (uint256);\\\\n\\\\n    /**\\\\n     * @notice Get the account\'s cToken balances\\\\n     */\\\\n    function getCTokenBalanceInternal(address account) internal view returns (uint256);\\\\n\\\\n    /**\\\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\\\n     * @dev Assumes interest has already been accrued up to the current block\\\\n     */\\\\n    function mintFresh(\\\\n        address minter,\\\\n        uint256 mintAmount,\\\\n        bool isNative\\\\n    ) internal returns (uint256, uint256);\\\\n\\\\n    /**\\\\n     * @notice User redeems cTokens in exchange for the underlying asset\\\\n     * @dev Assumes interest has already been accrued up to the current block\\\\n     */\\\\n    function redeemFresh(\\\\n        address payable redeemer,\\\\n        uint256 redeemTokensIn,\\\\n        uint256 redeemAmountIn,\\\\n        bool isNative\\\\n    ) internal returns (uint256);\\\\n\\\\n    /**\\\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\\\n     */\\\\n    function seizeInternal(\\\\n        address seizerToken,\\\\n        address liquidator,\\\\n        address borrower,\\\\n        uint256 seizeTokens\\\\n    ) internal returns (uint256);\\\\n\\\\n    /*** Reentrancy Guard ***/\\\\n\\\\n    /**\\\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\\\n     */\\\\n    modifier nonReentrant() {\\\\n        require(_notEntered, \\\\\\"re-entered\\\\\\");\\\\n        _notEntered = false;\\\\n        _;\\\\n        _notEntered = true; // get a gas-refund post-Istanbul\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb81f7f7548c521354f3bae03db3643709c5bec5fdc1d0342600d77060b9f332f\\"},\\"contracts/CTokenInterfaces.sol\\":{\\"content\\":\\"pragma solidity ^0.5.16;\\\\n\\\\nimport \\\\\\"./ComptrollerInterface.sol\\\\\\";\\\\nimport \\\\\\"./InterestRateModel.sol\\\\\\";\\\\nimport \\\\\\"./ERC3156FlashBorrowerInterface.sol\\\\\\";\\\\n\\\\ncontract CTokenStorage {\\\\n    /**\\\\n     * @dev Guard variable for re-entrancy checks\\\\n     */\\\\n    bool internal _notEntered;\\\\n\\\\n    /**\\\\n     * @notice EIP-20 token name for this token\\\\n     */\\\\n    string public name;\\\\n\\\\n    /**\\\\n     * @notice EIP-20 token symbol for this token\\\\n     */\\\\n    string public symbol;\\\\n\\\\n    /**\\\\n     * @notice EIP-20 token decimals for this token\\\\n     */\\\\n    uint8 public decimals;\\\\n\\\\n    /**\\\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\\\n     */\\\\n\\\\n    uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\\\\n\\\\n    /**\\\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\\\n     */\\\\n    uint256 internal constant reserveFactorMaxMantissa = 1e18;\\\\n\\\\n    /**\\\\n     * @notice Administrator for this contract\\\\n     */\\\\n    address payable public admin;\\\\n\\\\n    /**\\\\n     * @notice Pending administrator for this contract\\\\n     */\\\\n    address payable public pendingAdmin;\\\\n\\\\n    /**\\\\n     * @notice Contract which oversees inter-cToken operations\\\\n     */\\\\n    ComptrollerInterface public comptroller;\\\\n\\\\n    /**\\\\n     * @notice Model which tells what the current interest rate should be\\\\n     */\\\\n    InterestRateModel public interestRateModel;\\\\n\\\\n    /**\\\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\\\n     */\\\\n    uint256 internal initialExchangeRateMantissa;\\\\n\\\\n    /**\\\\n     * @notice Fraction of interest currently set aside for reserves\\\\n     */\\\\n    uint256 public reserveFactorMantissa;\\\\n\\\\n    /**\\\\n     * @notice Block number that interest was last accrued at\\\\n     */\\\\n    uint256 public accrualBlockNumber;\\\\n\\\\n    /**\\\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\\\n     */\\\\n    uint256 public borrowIndex;\\\\n\\\\n    /**\\\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\\\n     */\\\\n    uint256 public totalBorrows;\\\\n\\\\n    /**\\\\n     * @notice Total amount of reserves of the underlying held in this market\\\\n     */\\\\n    uint256 public totalReserves;\\\\n\\\\n    /**\\\\n     * @notice Total number of tokens in circulation\\\\n     */\\\\n    uint256 public totalSupply;\\\\n\\\\n    /**\\\\n     * @notice Official record of token balances for each account\\\\n     */\\\\n    mapping(address => uint256) internal accountTokens;\\\\n\\\\n    /**\\\\n     * @notice Approved token transfer amounts on behalf of others\\\\n     */\\\\n    mapping(address => mapping(address => uint256)) internal transferAllowances;\\\\n\\\\n    /**\\\\n     * @notice Container for borrow balance information\\\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\\\n     */\\\\n    struct BorrowSnapshot {\\\\n        uint256 principal;\\\\n        uint256 interestIndex;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Mapping of account addresses to outstanding borrow balances\\\\n     */\\\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\\\n}\\\\n\\\\ncontract CErc20Storage {\\\\n    /**\\\\n     * @notice Underlying asset for this CToken\\\\n     */\\\\n    address public underlying;\\\\n\\\\n    /**\\\\n     * @notice Implementation address for this contract\\\\n     */\\\\n    address public implementation;\\\\n}\\\\n\\\\ncontract CSupplyCapStorage {\\\\n    /**\\\\n     * @notice Internal cash counter for this CToken. Should equal underlying.balanceOf(address(this)) for CERC20.\\\\n     */\\\\n    uint256 public internalCash;\\\\n}\\\\n\\\\ncontract CCollateralCapStorage {\\\\n    /**\\\\n     * @notice Total number of tokens used as collateral in circulation.\\\\n     */\\\\n    uint256 public totalCollateralTokens;\\\\n\\\\n    /**\\\\n     * @notice Record of token balances which could be treated as collateral for each account.\\\\n     *         If collateral cap is not set, the value should be equal to accountTokens.\\\\n     */\\\\n    mapping(address => uint256) public accountCollateralTokens;\\\\n\\\\n    /**\\\\n     * @notice Check if accountCollateralTokens have been initialized.\\\\n     */\\\\n    mapping(address => bool) public isCollateralTokenInit;\\\\n\\\\n    /**\\\\n     * @notice Collateral cap for this CToken, zero for no cap.\\\\n     */\\\\n    uint256 public collateralCap;\\\\n}\\\\n\\\\n/*** Interface ***/\\\\n\\\\ncontract CTokenInterface is CTokenStorage {\\\\n    /**\\\\n     * @notice Indicator that this is a CToken contract (for inspection)\\\\n     */\\\\n    bool public constant isCToken = true;\\\\n\\\\n    /*** Market Events ***/\\\\n\\\\n    /**\\\\n     * @notice Event emitted when interest is accrued\\\\n     */\\\\n    event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\\\\n\\\\n    /**\\\\n     * @notice Event emitted when tokens are minted\\\\n     */\\\\n    event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\\\n\\\\n    /**\\\\n     * @notice Event emitted when tokens are redeemed\\\\n     */\\\\n    event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\\\n\\\\n    /**\\\\n     * @notice Event emitted when underlying is borrowed\\\\n     */\\\\n    event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\\\\n\\\\n    /**\\\\n     * @notice Event emitted when a borrow is repaid\\\\n     */\\\\n    event RepayBorrow(\\\\n        address payer,\\\\n        address borrower,\\\\n        uint256 repayAmount,\\\\n        uint256 accountBorrows,\\\\n        uint256 totalBorrows\\\\n    );\\\\n\\\\n    /**\\\\n     * @notice Event emitted when a borrow is liquidated\\\\n     */\\\\n    event LiquidateBorrow(\\\\n        address liquidator,\\\\n        address borrower,\\\\n        uint256 repayAmount,\\\\n        address cTokenCollateral,\\\\n        uint256 seizeTokens\\\\n    );\\\\n\\\\n    /*** Admin Events ***/\\\\n\\\\n    /**\\\\n     * @notice Event emitted when pendingAdmin is changed\\\\n     */\\\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\\\n\\\\n    /**\\\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\\\n     */\\\\n    event NewAdmin(address oldAdmin, address newAdmin);\\\\n\\\\n    /**\\\\n     * @notice Event emitted when comptroller is changed\\\\n     */\\\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\\\n\\\\n    /**\\\\n     * @notice Event emitted when interestRateModel is changed\\\\n     */\\\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\\\n\\\\n    /**\\\\n     * @notice Event emitted when the reserve factor is changed\\\\n     */\\\\n    event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\\\\n\\\\n    /**\\\\n     * @notice Event emitted when the reserves are added\\\\n     */\\\\n    event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\\\\n\\\\n    /**\\\\n     * @notice Event emitted when the reserves are reduced\\\\n     */\\\\n    event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\\\\n\\\\n    /**\\\\n     * @notice EIP20 Transfer event\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\\\n\\\\n    /**\\\\n     * @notice EIP20 Approval event\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\\\n\\\\n    /**\\\\n     * @notice Failure event\\\\n     */\\\\n    event Failure(uint256 error, uint256 info, uint256 detail);\\\\n\\\\n    /*** User Interface ***/\\\\n\\\\n    function transfer(address dst, uint256 amount) external returns (bool);\\\\n\\\\n    function transferFrom(\\\\n        address src,\\\\n        address dst,\\\\n        uint256 amount\\\\n    ) external returns (bool);\\\\n\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    function balanceOf(address owner) external view returns (uint256);\\\\n\\\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\\\n\\\\n    function getAccountSnapshot(address account)\\\\n        external\\\\n        view\\\\n        returns (\\\\n            uint256,\\\\n            uint256,\\\\n            uint256,\\\\n            uint256\\\\n        );\\\\n\\\\n    function borrowRatePerBlock() external view returns (uint256);\\\\n\\\\n    function supplyRatePerBlock() external view returns (uint256);\\\\n\\\\n    function totalBorrowsCurrent() external returns (uint256);\\\\n\\\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\\\n\\\\n    function borrowBalanceStored(address account) public view returns (uint256);\\\\n\\\\n    function exchangeRateCurrent() public returns (uint256);\\\\n\\\\n    function exchangeRateStored() public view returns (uint256);\\\\n\\\\n    function getCash() external view returns (uint256);\\\\n\\\\n    function accrueInterest() public returns (uint256);\\\\n\\\\n    function seize(\\\\n        address liquidator,\\\\n        address borrower,\\\\n        uint256 seizeTokens\\\\n    ) external returns (uint256);\\\\n\\\\n    /*** Admin Functions ***/\\\\n\\\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint256);\\\\n\\\\n    function _acceptAdmin() external returns (uint256);\\\\n\\\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint256);\\\\n\\\\n    function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\\\n\\\\n    function _reduceReserves(uint256 reduceAmount) external returns (uint256);\\\\n\\\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint256);\\\\n}\\\\n\\\\ncontract CErc20Interface is CErc20Storage {\\\\n    /*** User Interface ***/\\\\n\\\\n    function mint(uint256 mintAmount) external returns (uint256);\\\\n\\\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\\\n\\\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\\\n\\\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\\\n\\\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\\\n\\\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\\\n\\\\n    function liquidateBorrow(\\\\n        address borrower,\\\\n        uint256 repayAmount,\\\\n        CTokenInterface cTokenCollateral\\\\n    ) external returns (uint256);\\\\n\\\\n    function _addReserves(uint256 addAmount) external returns (uint256);\\\\n}\\\\n\\\\ncontract CWrappedNativeInterface is CErc20Interface {\\\\n    /**\\\\n     * @notice Flash loan fee ratio\\\\n     */\\\\n    uint256 public constant flashFeeBips = 3;\\\\n\\\\n    /*** Market Events ***/\\\\n\\\\n    /**\\\\n     * @notice Event emitted when a flashloan occured\\\\n     */\\\\n    event Flashloan(address indexed receiver, uint256 amount, uint256 totalFee, uint256 reservesFee);\\\\n\\\\n    /*** User Interface ***/\\\\n\\\\n    function mintNative() external payable returns (uint256);\\\\n\\\\n    function redeemNative(uint256 redeemTokens) external returns (uint256);\\\\n\\\\n    function redeemUnderlyingNative(uint256 redeemAmount) external returns (uint256);\\\\n\\\\n    function borrowNative(uint256 borrowAmount) external returns (uint256);\\\\n\\\\n    function repayBorrowNative() external payable returns (uint256);\\\\n\\\\n    function repayBorrowBehalfNative(address borrower) external payable returns (uint256);\\\\n\\\\n    function liquidateBorrowNative(address borrower, CTokenInterface cTokenCollateral)\\\\n        external\\\\n        payable\\\\n        returns (uint256);\\\\n\\\\n    function flashLoan(\\\\n        ERC3156FlashBorrowerInterface receiver,\\\\n        address initiator,\\\\n        uint256 amount,\\\\n        bytes calldata data\\\\n    ) external returns (bool);\\\\n\\\\n    function _addReservesNative() external payable returns (uint256);\\\\n\\\\n    function collateralCap() external view returns (uint256);\\\\n\\\\n    function totalCollateralTokens() external view returns (uint256);\\\\n}\\\\n\\\\ncontract CCapableErc20Interface is CErc20Interface, CSupplyCapStorage {\\\\n    /**\\\\n     * @notice Flash loan fee ratio\\\\n     */\\\\n    uint256 public constant flashFeeBips = 3;\\\\n\\\\n    /*** Market Events ***/\\\\n\\\\n    /**\\\\n     * @notice Event emitted when a flashloan occured\\\\n     */\\\\n    event Flashloan(address indexed receiver, uint256 amount, uint256 totalFee, uint256 reservesFee);\\\\n\\\\n    /*** User Interface ***/\\\\n\\\\n    function gulp() external;\\\\n}\\\\n\\\\ncontract CCollateralCapErc20Interface is CCapableErc20Interface, CCollateralCapStorage {\\\\n    /*** Admin Events ***/\\\\n\\\\n    /**\\\\n     * @notice Event emitted when collateral cap is set\\\\n     */\\\\n    event NewCollateralCap(address token, uint256 newCap);\\\\n\\\\n    /**\\\\n     * @notice Event emitted when user collateral is changed\\\\n     */\\\\n    event UserCollateralChanged(address account, uint256 newCollateralTokens);\\\\n\\\\n    /*** User Interface ***/\\\\n\\\\n    function registerCollateral(address account) external returns (uint256);\\\\n\\\\n    function unregisterCollateral(address account) external;\\\\n\\\\n    function flashLoan(\\\\n        ERC3156FlashBorrowerInterface receiver,\\\\n        address initiator,\\\\n        uint256 amount,\\\\n        bytes calldata data\\\\n    ) external returns (bool);\\\\n\\\\n    /*** Admin Functions ***/\\\\n\\\\n    function _setCollateralCap(uint256 newCollateralCap) external;\\\\n}\\\\n\\\\ncontract CDelegatorInterface {\\\\n    /**\\\\n     * @notice Emitted when implementation is changed\\\\n     */\\\\n    event NewImplementation(address oldImplementation, address newImplementation);\\\\n\\\\n    /**\\\\n     * @notice Called by the admin to update the implementation of the delegator\\\\n     * @param implementation_ The address of the new implementation for delegation\\\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\\\n     */\\\\n    function _setImplementation(\\\\n        address implementation_,\\\\n        bool allowResign,\\\\n        bytes memory becomeImplementationData\\\\n    ) public;\\\\n}\\\\n\\\\ncontract CDelegateInterface {\\\\n    /**\\\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\\\n     * @param data The encoded bytes data for any initialization\\\\n     */\\\\n    function _becomeImplementation(bytes memory data) public;\\\\n\\\\n    /**\\\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\\\n     */\\\\n    function _resignImplementation() public;\\\\n}\\\\n\\\\n/*** External interface ***/\\\\n\\\\n/**\\\\n * @title Flash loan receiver interface\\\\n */\\\\ninterface IFlashloanReceiver {\\\\n    function executeOperation(\\\\n        address sender,\\\\n        address underlying,\\\\n        uint256 amount,\\\\n        uint256 fee,\\\\n        bytes calldata params\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x81953173b45de7523c92f1a6d923fdb37af54f22656ee4fbe670e42116170b20\\"},\\"contracts/CarefulMath.sol\\":{\\"content\\":\\"pragma solidity ^0.5.16;\\\\n\\\\n/**\\\\n * @title Careful Math\\\\n * @author Compound\\\\n * @notice Derived from OpenZeppelin\'s SafeMath library\\\\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\\\n */\\\\ncontract CarefulMath {\\\\n    /**\\\\n     * @dev Possible error codes that we can return\\\\n     */\\\\n    enum MathError {\\\\n        NO_ERROR,\\\\n        DIVISION_BY_ZERO,\\\\n        INTEGER_OVERFLOW,\\\\n        INTEGER_UNDERFLOW\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Multiplies two numbers, returns an error on overflow.\\\\n     */\\\\n    function mulUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\\\n        if (a == 0) {\\\\n            return (MathError.NO_ERROR, 0);\\\\n        }\\\\n\\\\n        uint256 c = a * b;\\\\n\\\\n        if (c / a != b) {\\\\n            return (MathError.INTEGER_OVERFLOW, 0);\\\\n        } else {\\\\n            return (MathError.NO_ERROR, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Integer division of two numbers, truncating the quotient.\\\\n     */\\\\n    function divUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\\\n        if (b == 0) {\\\\n            return (MathError.DIVISION_BY_ZERO, 0);\\\\n        }\\\\n\\\\n        return (MathError.NO_ERROR, a / b);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\\\n     */\\\\n    function subUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\\\n        if (b <= a) {\\\\n            return (MathError.NO_ERROR, a - b);\\\\n        } else {\\\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Adds two numbers, returns an error on overflow.\\\\n     */\\\\n    function addUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\\\n        uint256 c = a + b;\\\\n\\\\n        if (c >= a) {\\\\n            return (MathError.NO_ERROR, c);\\\\n        } else {\\\\n            return (MathError.INTEGER_OVERFLOW, 0);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev add a and b and then subtract c\\\\n     */\\\\n    function addThenSubUInt(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        uint256 c\\\\n    ) internal pure returns (MathError, uint256) {\\\\n        (MathError err0, uint256 sum) = addUInt(a, b);\\\\n\\\\n        if (err0 != MathError.NO_ERROR) {\\\\n            return (err0, 0);\\\\n        }\\\\n\\\\n        return subUInt(sum, c);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x90cf991038eedf4bf014644819af5b2e8bbda13393ddb39153116f9b0de2a94c\\"},\\"contracts/ComptrollerInterface.sol\\":{\\"content\\":\\"pragma solidity ^0.5.16;\\\\n\\\\nimport \\\\\\"./CToken.sol\\\\\\";\\\\nimport \\\\\\"./ComptrollerStorage.sol\\\\\\";\\\\n\\\\ncontract ComptrollerInterface {\\\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\\\n    bool public constant isComptroller = true;\\\\n\\\\n    /*** Assets You Are In ***/\\\\n\\\\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\\\n\\\\n    function exitMarket(address cToken) external returns (uint256);\\\\n\\\\n    /*** Policy Hooks ***/\\\\n\\\\n    function mintAllowed(\\\\n        address cToken,\\\\n        address minter,\\\\n        uint256 mintAmount\\\\n    ) external returns (uint256);\\\\n\\\\n    function mintVerify(\\\\n        address cToken,\\\\n        address minter,\\\\n        uint256 mintAmount,\\\\n        uint256 mintTokens\\\\n    ) external;\\\\n\\\\n    function redeemAllowed(\\\\n        address cToken,\\\\n        address redeemer,\\\\n        uint256 redeemTokens\\\\n    ) external returns (uint256);\\\\n\\\\n    function redeemVerify(\\\\n        address cToken,\\\\n        address redeemer,\\\\n        uint256 redeemAmount,\\\\n        uint256 redeemTokens\\\\n    ) external;\\\\n\\\\n    function borrowAllowed(\\\\n        address cToken,\\\\n        address borrower,\\\\n        uint256 borrowAmount\\\\n    ) external returns (uint256);\\\\n\\\\n    function borrowVerify(\\\\n        address cToken,\\\\n        address borrower,\\\\n        uint256 borrowAmount\\\\n    ) external;\\\\n\\\\n    function repayBorrowAllowed(\\\\n        address cToken,\\\\n        address payer,\\\\n        address borrower,\\\\n        uint256 repayAmount\\\\n    ) external returns (uint256);\\\\n\\\\n    function repayBorrowVerify(\\\\n        address cToken,\\\\n        address payer,\\\\n        address borrower,\\\\n        uint256 repayAmount,\\\\n        uint256 borrowerIndex\\\\n    ) external;\\\\n\\\\n    function liquidateBorrowAllowed(\\\\n        address cTokenBorrowed,\\\\n        address cTokenCollateral,\\\\n        address liquidator,\\\\n        address borrower,\\\\n        uint256 repayAmount\\\\n    ) external returns (uint256);\\\\n\\\\n    function liquidateBorrowVerify(\\\\n        address cTokenBorrowed,\\\\n        address cTokenCollateral,\\\\n        address liquidator,\\\\n        address borrower,\\\\n        uint256 repayAmount,\\\\n        uint256 seizeTokens\\\\n    ) external;\\\\n\\\\n    function seizeAllowed(\\\\n        address cTokenCollateral,\\\\n        address cTokenBorrowed,\\\\n        address liquidator,\\\\n        address borrower,\\\\n        uint256 seizeTokens\\\\n    ) external returns (uint256);\\\\n\\\\n    function seizeVerify(\\\\n        address cTokenCollateral,\\\\n        address cTokenBorrowed,\\\\n        address liquidator,\\\\n        address borrower,\\\\n        uint256 seizeTokens\\\\n    ) external;\\\\n\\\\n    function transferAllowed(\\\\n        address cToken,\\\\n        address src,\\\\n        address dst,\\\\n        uint256 transferTokens\\\\n    ) external returns (uint256);\\\\n\\\\n    function transferVerify(\\\\n        address cToken,\\\\n        address src,\\\\n        address dst,\\\\n        uint256 transferTokens\\\\n    ) external;\\\\n\\\\n    /*** Liquidity/Liquidation Calculations ***/\\\\n\\\\n    function liquidateCalculateSeizeTokens(\\\\n        address cTokenBorrowed,\\\\n        address cTokenCollateral,\\\\n        uint256 repayAmount\\\\n    ) external view returns (uint256, uint256);\\\\n}\\\\n\\\\ninterface ComptrollerInterfaceExtension {\\\\n    function checkMembership(address account, CToken cToken) external view returns (bool);\\\\n\\\\n    function updateCTokenVersion(address cToken, ComptrollerV1Storage.Version version) external;\\\\n\\\\n    function flashloanAllowed(\\\\n        address cToken,\\\\n        address receiver,\\\\n        uint256 amount,\\\\n        bytes calldata params\\\\n    ) external view returns (bool);\\\\n\\\\n    function getAccountLiquidity(address account)\\\\n        external\\\\n        view\\\\n        returns (\\\\n            uint256,\\\\n            uint256,\\\\n            uint256\\\\n        );\\\\n\\\\n    function supplyCaps(address market) external view returns (uint256);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x548fe8a7aa9ff0a9b70be3ecbb132acc7938fe9d5a59f9bbbf93e3caef5cb5d4\\"},\\"contracts/ComptrollerStorage.sol\\":{\\"content\\":\\"pragma solidity ^0.5.16;\\\\n\\\\nimport \\\\\\"./CToken.sol\\\\\\";\\\\nimport \\\\\\"./PriceOracle/PriceOracle.sol\\\\\\";\\\\n\\\\ncontract UnitrollerAdminStorage {\\\\n    /**\\\\n     * @notice Administrator for this contract\\\\n     */\\\\n    address public admin;\\\\n\\\\n    /**\\\\n     * @notice Pending administrator for this contract\\\\n     */\\\\n    address public pendingAdmin;\\\\n\\\\n    /**\\\\n     * @notice Active brains of Unitroller\\\\n     */\\\\n    address public comptrollerImplementation;\\\\n\\\\n    /**\\\\n     * @notice Pending brains of Unitroller\\\\n     */\\\\n    address public pendingComptrollerImplementation;\\\\n}\\\\n\\\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\\\n    /**\\\\n     * @notice Oracle which gives the price of any given asset\\\\n     */\\\\n    PriceOracle public oracle;\\\\n\\\\n    /**\\\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\\\n     */\\\\n    uint256 public closeFactorMantissa;\\\\n\\\\n    /**\\\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\\\n     */\\\\n    uint256 public liquidationIncentiveMantissa;\\\\n\\\\n    /**\\\\n     * @notice Per-account mapping of \\\\\\"assets you are in\\\\\\"\\\\n     */\\\\n    mapping(address => CToken[]) public accountAssets;\\\\n\\\\n    enum Version {\\\\n        VANILLA,\\\\n        COLLATERALCAP,\\\\n        WRAPPEDNATIVE\\\\n    }\\\\n\\\\n    struct Market {\\\\n        /// @notice Whether or not this market is listed\\\\n        bool isListed;\\\\n        /**\\\\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\\\\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\\\\n         *  Must be between 0 and 1, and stored as a mantissa.\\\\n         */\\\\n        uint256 collateralFactorMantissa;\\\\n        /// @notice Per-market mapping of \\\\\\"accounts in this asset\\\\\\"\\\\n        mapping(address => bool) accountMembership;\\\\n        /// @notice CToken version\\\\n        Version version;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Official mapping of cTokens -> Market metadata\\\\n     * @dev Used e.g. to determine if a market is supported\\\\n     */\\\\n    mapping(address => Market) public markets;\\\\n\\\\n    /**\\\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\\\n     *  Actions which allow users to remove their own assets cannot be paused.\\\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\\\n     */\\\\n    address public pauseGuardian;\\\\n    bool public _mintGuardianPaused;\\\\n    bool public _borrowGuardianPaused;\\\\n    bool public transferGuardianPaused;\\\\n    bool public seizeGuardianPaused;\\\\n    mapping(address => bool) public mintGuardianPaused;\\\\n    mapping(address => bool) public borrowGuardianPaused;\\\\n    mapping(address => bool) public flashloanGuardianPaused;\\\\n\\\\n    /// @notice A list of all markets\\\\n    CToken[] public allMarkets;\\\\n\\\\n    // @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\\\n    address public borrowCapGuardian;\\\\n\\\\n    // @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\\\n    mapping(address => uint256) public borrowCaps;\\\\n\\\\n    // @notice The supplyCapGuardian can set supplyCaps to any number for any market. Lowering the supply cap could disable supplying to the given market.\\\\n    address public supplyCapGuardian;\\\\n\\\\n    // @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\\\\n    mapping(address => uint256) public supplyCaps;\\\\n\\\\n    // @notice creditLimits allowed specific protocols to borrow and repay specific markets without collateral.\\\\n    mapping(address => mapping(address => uint256)) public creditLimits;\\\\n\\\\n    /// @notice liquidityMining the liquidity mining module that handles the LM rewards distribution.\\\\n    address public liquidityMining;\\\\n\\\\n    /// @notice isMarkertDelisted records the market which has been delisted by us.\\\\n    mapping(address => bool) public isMarkertDelisted;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x4ee560afc5fd99899d82cd655e23635d6605b0edc082adbdb19e51af052462c0\\"},\\"contracts/EIP20Interface.sol\\":{\\"content\\":\\"pragma solidity ^0.5.16;\\\\n\\\\n/**\\\\n * @title ERC 20 Token Standard Interface\\\\n *  https://eips.ethereum.org/EIPS/eip-20\\\\n */\\\\ninterface EIP20Interface {\\\\n    function name() external view returns (string memory);\\\\n\\\\n    function symbol() external view returns (string memory);\\\\n\\\\n    function decimals() external view returns (uint8);\\\\n\\\\n    /**\\\\n     * @notice Get the total number of tokens in circulation\\\\n     * @return The supply of tokens\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @notice Gets the balance of the specified address\\\\n     * @param owner The address from which the balance will be retrieved\\\\n     * @return The balance\\\\n     */\\\\n    function balanceOf(address owner) external view returns (uint256 balance);\\\\n\\\\n    /**\\\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\\\n     * @param dst The address of the destination account\\\\n     * @param amount The number of tokens to transfer\\\\n     * @return Whether or not the transfer succeeded\\\\n     */\\\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\\\n\\\\n    /**\\\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\\\n     * @param src The address of the source account\\\\n     * @param dst The address of the destination account\\\\n     * @param amount The number of tokens to transfer\\\\n     * @return Whether or not the transfer succeeded\\\\n     */\\\\n    function transferFrom(\\\\n        address src,\\\\n        address dst,\\\\n        uint256 amount\\\\n    ) external returns (bool success);\\\\n\\\\n    /**\\\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\\\n     * @dev This will overwrite the approval amount for `spender`\\\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\\\n     * @param spender The address of the account which may transfer tokens\\\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\\\n     * @return Whether or not the approval succeeded\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool success);\\\\n\\\\n    /**\\\\n     * @notice Get the current allowance from `owner` for `spender`\\\\n     * @param owner The address of the account which owns the tokens to be spent\\\\n     * @param spender The address of the account which may transfer tokens\\\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\\\n\\\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x468a9f4f1d1cdc9ab69c65f71f4a5e441766a5f648d5f5c53e86d8b44385ee3f\\"},\\"contracts/EIP20NonStandardInterface.sol\\":{\\"content\\":\\"pragma solidity ^0.5.16;\\\\n\\\\n/**\\\\n * @title EIP20NonStandardInterface\\\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\\\n */\\\\ninterface EIP20NonStandardInterface {\\\\n    /**\\\\n     * @notice Get the total number of tokens in circulation\\\\n     * @return The supply of tokens\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @notice Gets the balance of the specified address\\\\n     * @param owner The address from which the balance will be retrieved\\\\n     * @return The balance\\\\n     */\\\\n    function balanceOf(address owner) external view returns (uint256 balance);\\\\n\\\\n    ///\\\\n    /// !!!!!!!!!!!!!!\\\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\\\n    /// !!!!!!!!!!!!!!\\\\n    ///\\\\n\\\\n    /**\\\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\\\n     * @param dst The address of the destination account\\\\n     * @param amount The number of tokens to transfer\\\\n     */\\\\n    function transfer(address dst, uint256 amount) external;\\\\n\\\\n    ///\\\\n    /// !!!!!!!!!!!!!!\\\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\\\n    /// !!!!!!!!!!!!!!\\\\n    ///\\\\n\\\\n    /**\\\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\\\n     * @param src The address of the source account\\\\n     * @param dst The address of the destination account\\\\n     * @param amount The number of tokens to transfer\\\\n     */\\\\n    function transferFrom(\\\\n        address src,\\\\n        address dst,\\\\n        uint256 amount\\\\n    ) external;\\\\n\\\\n    /**\\\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\\\n     * @dev This will overwrite the approval amount for `spender`\\\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\\\n     * @param spender The address of the account which may transfer tokens\\\\n     * @param amount The number of tokens that are approved\\\\n     * @return Whether or not the approval succeeded\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool success);\\\\n\\\\n    /**\\\\n     * @notice Get the current allowance from `owner` for `spender`\\\\n     * @param owner The address of the account which owns the tokens to be spent\\\\n     * @param spender The address of the account which may transfer tokens\\\\n     * @return The number of tokens allowed to be spent\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\\\n\\\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x38cbb1a6f7e81083c61b859cbdb4a015c6fea54988865f303495ad047d90cb76\\"},\\"contracts/ERC3156FlashBorrowerInterface.sol\\":{\\"content\\":\\"pragma solidity ^0.5.16;\\\\n\\\\ninterface ERC3156FlashBorrowerInterface {\\\\n    /**\\\\n     * @dev Receive a flash loan.\\\\n     * @param initiator The initiator of the loan.\\\\n     * @param token The loan currency.\\\\n     * @param amount The amount of tokens lent.\\\\n     * @param fee The additional amount of tokens to repay.\\\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\\\n     * @return The keccak256 hash of \\\\\\"ERC3156FlashBorrower.onFlashLoan\\\\\\"\\\\n     */\\\\n    function onFlashLoan(\\\\n        address initiator,\\\\n        address token,\\\\n        uint256 amount,\\\\n        uint256 fee,\\\\n        bytes calldata data\\\\n    ) external returns (bytes32);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x18b8731a7f3303bfdb5dad4f76d30dfb2be70bca05a31cef5762dabd8e5fba76\\"},\\"contracts/ErrorReporter.sol\\":{\\"content\\":\\"pragma solidity ^0.5.16;\\\\n\\\\ncontract ComptrollerErrorReporter {\\\\n    enum Error {\\\\n        NO_ERROR,\\\\n        UNAUTHORIZED,\\\\n        COMPTROLLER_MISMATCH,\\\\n        INSUFFICIENT_SHORTFALL,\\\\n        INSUFFICIENT_LIQUIDITY,\\\\n        INVALID_CLOSE_FACTOR,\\\\n        INVALID_COLLATERAL_FACTOR,\\\\n        INVALID_LIQUIDATION_INCENTIVE,\\\\n        MARKET_NOT_ENTERED, // no longer possible\\\\n        MARKET_NOT_LISTED,\\\\n        MARKET_ALREADY_LISTED,\\\\n        MATH_ERROR,\\\\n        NONZERO_BORROW_BALANCE,\\\\n        PRICE_ERROR,\\\\n        REJECTION,\\\\n        SNAPSHOT_ERROR,\\\\n        TOO_MANY_ASSETS,\\\\n        TOO_MUCH_REPAY\\\\n    }\\\\n\\\\n    enum FailureInfo {\\\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\\\n        EXIT_MARKET_BALANCE_OWED,\\\\n        EXIT_MARKET_REJECTION,\\\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\\\n        SET_CLOSE_FACTOR_VALIDATION,\\\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\\\n        SET_MAX_ASSETS_OWNER_CHECK,\\\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\\\n        SUPPORT_MARKET_EXISTS,\\\\n        SUPPORT_MARKET_OWNER_CHECK,\\\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\\\n     **/\\\\n    event Failure(uint256 error, uint256 info, uint256 detail);\\\\n\\\\n    /**\\\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\\\n     */\\\\n    function fail(Error err, FailureInfo info) internal returns (uint256) {\\\\n        emit Failure(uint256(err), uint256(info), 0);\\\\n\\\\n        return uint256(err);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\\\n     */\\\\n    function failOpaque(\\\\n        Error err,\\\\n        FailureInfo info,\\\\n        uint256 opaqueError\\\\n    ) internal returns (uint256) {\\\\n        emit Failure(uint256(err), uint256(info), opaqueError);\\\\n\\\\n        return uint256(err);\\\\n    }\\\\n}\\\\n\\\\ncontract TokenErrorReporter {\\\\n    enum Error {\\\\n        NO_ERROR,\\\\n        UNAUTHORIZED,\\\\n        BAD_INPUT,\\\\n        COMPTROLLER_REJECTION,\\\\n        COMPTROLLER_CALCULATION_ERROR,\\\\n        INTEREST_RATE_MODEL_ERROR,\\\\n        INVALID_ACCOUNT_PAIR,\\\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\\\n        INVALID_COLLATERAL_FACTOR,\\\\n        MATH_ERROR,\\\\n        MARKET_NOT_FRESH,\\\\n        MARKET_NOT_LISTED,\\\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\\\n        TOKEN_INSUFFICIENT_BALANCE,\\\\n        TOKEN_INSUFFICIENT_CASH,\\\\n        TOKEN_TRANSFER_IN_FAILED,\\\\n        TOKEN_TRANSFER_OUT_FAILED\\\\n    }\\\\n\\\\n    /*\\\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\\\n     *       This is because FailureInfo grows significantly faster, and\\\\n     *       the order of Error has some meaning, while the order of FailureInfo\\\\n     *       is entirely arbitrary.\\\\n     */\\\\n    enum FailureInfo {\\\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\\\n        BORROW_ACCRUE_INTEREST_FAILED,\\\\n        BORROW_CASH_NOT_AVAILABLE,\\\\n        BORROW_FRESHNESS_CHECK,\\\\n        BORROW_MARKET_NOT_LISTED,\\\\n        BORROW_COMPTROLLER_REJECTION,\\\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\\\n        LIQUIDATE_FRESHNESS_CHECK,\\\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\\\n        MINT_ACCRUE_INTEREST_FAILED,\\\\n        MINT_COMPTROLLER_REJECTION,\\\\n        MINT_FRESHNESS_CHECK,\\\\n        MINT_TRANSFER_IN_FAILED,\\\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\\\n        REDEEM_COMPTROLLER_REJECTION,\\\\n        REDEEM_FRESHNESS_CHECK,\\\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\\\n        REDUCE_RESERVES_ADMIN_CHECK,\\\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\\\n        REDUCE_RESERVES_FRESH_CHECK,\\\\n        REDUCE_RESERVES_VALIDATION,\\\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\\\n        REPAY_BORROW_FRESHNESS_CHECK,\\\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\\\n        SET_COMPTROLLER_OWNER_CHECK,\\\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\\\n        SET_MAX_ASSETS_OWNER_CHECK,\\\\n        SET_ORACLE_MARKET_NOT_LISTED,\\\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\\\n        TRANSFER_COMPTROLLER_REJECTION,\\\\n        TRANSFER_NOT_ALLOWED,\\\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\\\n        ADD_RESERVES_FRESH_CHECK,\\\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\\\n     **/\\\\n    event Failure(uint256 error, uint256 info, uint256 detail);\\\\n\\\\n    /**\\\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\\\n     */\\\\n    function fail(Error err, FailureInfo info) internal returns (uint256) {\\\\n        emit Failure(uint256(err), uint256(info), 0);\\\\n\\\\n        return uint256(err);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\\\n     */\\\\n    function failOpaque(\\\\n        Error err,\\\\n        FailureInfo info,\\\\n        uint256 opaqueError\\\\n    ) internal returns (uint256) {\\\\n        emit Failure(uint256(err), uint256(info), opaqueError);\\\\n\\\\n        return uint256(err);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8624446572a3999d9b4cc7b9f7e68b462c1e307247fe572ebe24035192103f7\\"},\\"contracts/Exponential.sol\\":{\\"content\\":\\"pragma solidity ^0.5.16;\\\\n\\\\nimport \\\\\\"./CarefulMath.sol\\\\\\";\\\\n\\\\n/**\\\\n * @title Exponential module for storing fixed-precision decimals\\\\n * @author Compound\\\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\\\n *         `Exp({mantissa: 5100000000000000000})`.\\\\n */\\\\ncontract Exponential is CarefulMath {\\\\n    uint256 constant expScale = 1e18;\\\\n    uint256 constant doubleScale = 1e36;\\\\n    uint256 constant halfExpScale = expScale / 2;\\\\n    uint256 constant mantissaOne = expScale;\\\\n\\\\n    struct Exp {\\\\n        uint256 mantissa;\\\\n    }\\\\n\\\\n    struct Double {\\\\n        uint256 mantissa;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Creates an exponential from numerator and denominator values.\\\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\\\n     *            or if `denom` is zero.\\\\n     */\\\\n    function getExp(uint256 num, uint256 denom) internal pure returns (MathError, Exp memory) {\\\\n        (MathError err0, uint256 scaledNumerator) = mulUInt(num, expScale);\\\\n        if (err0 != MathError.NO_ERROR) {\\\\n            return (err0, Exp({mantissa: 0}));\\\\n        }\\\\n\\\\n        (MathError err1, uint256 rational) = divUInt(scaledNumerator, denom);\\\\n        if (err1 != MathError.NO_ERROR) {\\\\n            return (err1, Exp({mantissa: 0}));\\\\n        }\\\\n\\\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Adds two exponentials, returning a new exponential.\\\\n     */\\\\n    function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\\\n        (MathError error, uint256 result) = addUInt(a.mantissa, b.mantissa);\\\\n\\\\n        return (error, Exp({mantissa: result}));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Subtracts two exponentials, returning a new exponential.\\\\n     */\\\\n    function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\\\n        (MathError error, uint256 result) = subUInt(a.mantissa, b.mantissa);\\\\n\\\\n        return (error, Exp({mantissa: result}));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\\\n     */\\\\n    function mulScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\\\\n        (MathError err0, uint256 scaledMantissa) = mulUInt(a.mantissa, scalar);\\\\n        if (err0 != MathError.NO_ERROR) {\\\\n            return (err0, Exp({mantissa: 0}));\\\\n        }\\\\n\\\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\\\n     */\\\\n    function mulScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (MathError, uint256) {\\\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\\\n        if (err != MathError.NO_ERROR) {\\\\n            return (err, 0);\\\\n        }\\\\n\\\\n        return (MathError.NO_ERROR, truncate(product));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\\\n     */\\\\n    function mulScalarTruncateAddUInt(\\\\n        Exp memory a,\\\\n        uint256 scalar,\\\\n        uint256 addend\\\\n    ) internal pure returns (MathError, uint256) {\\\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\\\n        if (err != MathError.NO_ERROR) {\\\\n            return (err, 0);\\\\n        }\\\\n\\\\n        return addUInt(truncate(product), addend);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\\\n     */\\\\n    function mul_ScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (uint256) {\\\\n        Exp memory product = mul_(a, scalar);\\\\n        return truncate(product);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\\\n     */\\\\n    function mul_ScalarTruncateAddUInt(\\\\n        Exp memory a,\\\\n        uint256 scalar,\\\\n        uint256 addend\\\\n    ) internal pure returns (uint256) {\\\\n        Exp memory product = mul_(a, scalar);\\\\n        return add_(truncate(product), addend);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\\\n     */\\\\n    function divScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\\\\n        (MathError err0, uint256 descaledMantissa) = divUInt(a.mantissa, scalar);\\\\n        if (err0 != MathError.NO_ERROR) {\\\\n            return (err0, Exp({mantissa: 0}));\\\\n        }\\\\n\\\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\\\n     */\\\\n    function divScalarByExp(uint256 scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\\\\n        /*\\\\n          We are doing this as:\\\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\\\n\\\\n          How it works:\\\\n          Exp = a / b;\\\\n          Scalar = s;\\\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\\\n        */\\\\n        (MathError err0, uint256 numerator) = mulUInt(expScale, scalar);\\\\n        if (err0 != MathError.NO_ERROR) {\\\\n            return (err0, Exp({mantissa: 0}));\\\\n        }\\\\n        return getExp(numerator, divisor.mantissa);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\\\n     */\\\\n    function divScalarByExpTruncate(uint256 scalar, Exp memory divisor) internal pure returns (MathError, uint256) {\\\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\\\n        if (err != MathError.NO_ERROR) {\\\\n            return (err, 0);\\\\n        }\\\\n\\\\n        return (MathError.NO_ERROR, truncate(fraction));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\\\n     */\\\\n    function div_ScalarByExp(uint256 scalar, Exp memory divisor) internal pure returns (Exp memory) {\\\\n        /*\\\\n          We are doing this as:\\\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\\\n\\\\n          How it works:\\\\n          Exp = a / b;\\\\n          Scalar = s;\\\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\\\n        */\\\\n        uint256 numerator = mul_(expScale, scalar);\\\\n        return Exp({mantissa: div_(numerator, divisor)});\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\\\n     */\\\\n    function div_ScalarByExpTruncate(uint256 scalar, Exp memory divisor) internal pure returns (uint256) {\\\\n        Exp memory fraction = div_ScalarByExp(scalar, divisor);\\\\n        return truncate(fraction);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Multiplies two exponentials, returning a new exponential.\\\\n     */\\\\n    function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\\\n        (MathError err0, uint256 doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\\\n        if (err0 != MathError.NO_ERROR) {\\\\n            return (err0, Exp({mantissa: 0}));\\\\n        }\\\\n\\\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\\\n        //  See \\\\\\"Listing 6\\\\\\" and text above it at https://accu.org/index.php/journals/1717\\\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\\\n        (MathError err1, uint256 doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\\\n        if (err1 != MathError.NO_ERROR) {\\\\n            return (err1, Exp({mantissa: 0}));\\\\n        }\\\\n\\\\n        (MathError err2, uint256 product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\\\n        assert(err2 == MathError.NO_ERROR);\\\\n\\\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\\\n     */\\\\n    function mulExp(uint256 a, uint256 b) internal pure returns (MathError, Exp memory) {\\\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Multiplies three exponentials, returning a new exponential.\\\\n     */\\\\n    function mulExp3(\\\\n        Exp memory a,\\\\n        Exp memory b,\\\\n        Exp memory c\\\\n    ) internal pure returns (MathError, Exp memory) {\\\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\\\n        if (err != MathError.NO_ERROR) {\\\\n            return (err, ab);\\\\n        }\\\\n        return mulExp(ab, c);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Divides two exponentials, returning a new exponential.\\\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\\\n     */\\\\n    function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\\\n        return getExp(a.mantissa, b.mantissa);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Truncates the given exp to a whole number value.\\\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\\\n     */\\\\n    function truncate(Exp memory exp) internal pure returns (uint256) {\\\\n        // Note: We are not using careful math here as we\'re performing a division that cannot fail\\\\n        return exp.mantissa / expScale;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Checks if first Exp is less than second Exp.\\\\n     */\\\\n    function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\\\n        return left.mantissa < right.mantissa;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Checks if left Exp <= right Exp.\\\\n     */\\\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\\\n        return left.mantissa <= right.mantissa;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev returns true if Exp is exactly zero\\\\n     */\\\\n    function isZeroExp(Exp memory value) internal pure returns (bool) {\\\\n        return value.mantissa == 0;\\\\n    }\\\\n\\\\n    function safe224(uint256 n, string memory errorMessage) internal pure returns (uint224) {\\\\n        require(n < 2**224, errorMessage);\\\\n        return uint224(n);\\\\n    }\\\\n\\\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\\\n        require(n < 2**32, errorMessage);\\\\n        return uint32(n);\\\\n    }\\\\n\\\\n    function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\\\n    }\\\\n\\\\n    function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\\\n    }\\\\n\\\\n    function add_(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return add_(a, b, \\\\\\"addition overflow\\\\\\");\\\\n    }\\\\n\\\\n    function add_(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        uint256 c = a + b;\\\\n        require(c >= a, errorMessage);\\\\n        return c;\\\\n    }\\\\n\\\\n    function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\\\n    }\\\\n\\\\n    function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\\\n    }\\\\n\\\\n    function sub_(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return sub_(a, b, \\\\\\"subtraction underflow\\\\\\");\\\\n    }\\\\n\\\\n    function sub_(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        require(b <= a, errorMessage);\\\\n        return a - b;\\\\n    }\\\\n\\\\n    function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\\\n    }\\\\n\\\\n    function mul_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\\\n    }\\\\n\\\\n    function mul_(uint256 a, Exp memory b) internal pure returns (uint256) {\\\\n        return mul_(a, b.mantissa) / expScale;\\\\n    }\\\\n\\\\n    function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\\\n    }\\\\n\\\\n    function mul_(Double memory a, uint256 b) internal pure returns (Double memory) {\\\\n        return Double({mantissa: mul_(a.mantissa, b)});\\\\n    }\\\\n\\\\n    function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\\\n        return mul_(a, b.mantissa) / doubleScale;\\\\n    }\\\\n\\\\n    function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return mul_(a, b, \\\\\\"multiplication overflow\\\\\\");\\\\n    }\\\\n\\\\n    function mul_(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        if (a == 0 || b == 0) {\\\\n            return 0;\\\\n        }\\\\n        uint256 c = a * b;\\\\n        require(c / a == b, errorMessage);\\\\n        return c;\\\\n    }\\\\n\\\\n    function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\\\n    }\\\\n\\\\n    function div_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\\\n        return Exp({mantissa: div_(a.mantissa, b)});\\\\n    }\\\\n\\\\n    function div_(uint256 a, Exp memory b) internal pure returns (uint256) {\\\\n        return div_(mul_(a, expScale), b.mantissa);\\\\n    }\\\\n\\\\n    function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\\\n    }\\\\n\\\\n    function div_(Double memory a, uint256 b) internal pure returns (Double memory) {\\\\n        return Double({mantissa: div_(a.mantissa, b)});\\\\n    }\\\\n\\\\n    function div_(uint256 a, Double memory b) internal pure returns (uint256) {\\\\n        return div_(mul_(a, doubleScale), b.mantissa);\\\\n    }\\\\n\\\\n    function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return div_(a, b, \\\\\\"divide by zero\\\\\\");\\\\n    }\\\\n\\\\n    function div_(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        require(b > 0, errorMessage);\\\\n        return a / b;\\\\n    }\\\\n\\\\n    function fraction(uint256 a, uint256 b) internal pure returns (Double memory) {\\\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\\\n    }\\\\n\\\\n    // implementation from https://github.com/Uniswap/uniswap-lib/commit/99f3f28770640ba1bb1ff460ac7c5292fb8291a0\\\\n    // original implementation: https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\\\n        if (x == 0) return 0;\\\\n        uint256 xx = x;\\\\n        uint256 r = 1;\\\\n\\\\n        if (xx >= 0x100000000000000000000000000000000) {\\\\n            xx >>= 128;\\\\n            r <<= 64;\\\\n        }\\\\n        if (xx >= 0x10000000000000000) {\\\\n            xx >>= 64;\\\\n            r <<= 32;\\\\n        }\\\\n        if (xx >= 0x100000000) {\\\\n            xx >>= 32;\\\\n            r <<= 16;\\\\n        }\\\\n        if (xx >= 0x10000) {\\\\n            xx >>= 16;\\\\n            r <<= 8;\\\\n        }\\\\n        if (xx >= 0x100) {\\\\n            xx >>= 8;\\\\n            r <<= 4;\\\\n        }\\\\n        if (xx >= 0x10) {\\\\n            xx >>= 4;\\\\n            r <<= 2;\\\\n        }\\\\n        if (xx >= 0x8) {\\\\n            r <<= 1;\\\\n        }\\\\n\\\\n        r = (r + x / r) >> 1;\\\\n        r = (r + x / r) >> 1;\\\\n        r = (r + x / r) >> 1;\\\\n        r = (r + x / r) >> 1;\\\\n        r = (r + x / r) >> 1;\\\\n        r = (r + x / r) >> 1;\\\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\\\n        uint256 r1 = x / r;\\\\n        return (r < r1 ? r : r1);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xba4952ec54a04bb19f130061e4c5c8de0634a239074be3d654263b214fb37317\\"},\\"contracts/InterestRateModel.sol\\":{\\"content\\":\\"pragma solidity ^0.5.16;\\\\n\\\\n/**\\\\n * @title Compound\'s InterestRateModel Interface\\\\n * @author Compound\\\\n */\\\\ncontract InterestRateModel {\\\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\\\n    bool public constant isInterestRateModel = true;\\\\n\\\\n    /**\\\\n     * @notice Calculates the current borrow interest rate per block\\\\n     * @param cash The total amount of cash the market has\\\\n     * @param borrows The total amount of borrows the market has outstanding\\\\n     * @param reserves The total amnount of reserves the market has\\\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\\\n     */\\\\n    function getBorrowRate(\\\\n        uint256 cash,\\\\n        uint256 borrows,\\\\n        uint256 reserves\\\\n    ) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @notice Calculates the current supply interest rate per block\\\\n     * @param cash The total amount of cash the market has\\\\n     * @param borrows The total amount of borrows the market has outstanding\\\\n     * @param reserves The total amnount of reserves the market has\\\\n     * @param reserveFactorMantissa The current reserve factor the market has\\\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\\\n     */\\\\n    function getSupplyRate(\\\\n        uint256 cash,\\\\n        uint256 borrows,\\\\n        uint256 reserves,\\\\n        uint256 reserveFactorMantissa\\\\n    ) external view returns (uint256);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5d4f6fadca3b947ad8584b3988d99409734f2d237bcb7260fe54801fd3a31c36\\"},\\"contracts/PriceOracle/PriceOracle.sol\\":{\\"content\\":\\"pragma solidity ^0.5.16;\\\\n\\\\nimport \\\\\\"../CToken.sol\\\\\\";\\\\n\\\\ncontract PriceOracle {\\\\n    /**\\\\n     * @notice Get the underlying price of a cToken asset\\\\n     * @param cToken The cToken to get the underlying price of\\\\n     * @return The underlying asset price mantissa (scaled by 1e18).\\\\n     *  Zero means the price is unavailable.\\\\n     */\\\\n    function getUnderlyingPrice(CToken cToken) external view returns (uint256);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8184c962f9c4243feed1bcfa3fb225da145db3661d2c7c9decc256f851128acf\\"},\\"contracts/PriceOracle/PriceOracleProxyUSD.sol\\":{\\"content\\":\\"pragma solidity ^0.5.16;\\\\n\\\\nimport \\\\\\"./PriceOracle.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/AggregatorV3Interface.sol\\\\\\";\\\\nimport \\\\\\"./interfaces/V1PriceOracleInterface.sol\\\\\\";\\\\nimport \\\\\\"../CErc20.sol\\\\\\";\\\\nimport \\\\\\"../CToken.sol\\\\\\";\\\\nimport \\\\\\"../Exponential.sol\\\\\\";\\\\nimport \\\\\\"../EIP20Interface.sol\\\\\\";\\\\n\\\\ncontract PriceOracleProxyUSD is PriceOracle, Exponential {\\\\n    /// @notice ChainLink aggregator base, currently support USD and ETH\\\\n    enum AggregatorBase {\\\\n        USD,\\\\n        ETH\\\\n    }\\\\n\\\\n    /// @notice Admin address\\\\n    address public admin;\\\\n\\\\n    /// @notice Guardian address\\\\n    address public guardian;\\\\n\\\\n    struct AggregatorInfo {\\\\n        /// @notice The source address of the aggregator\\\\n        AggregatorV3Interface source;\\\\n        /// @notice The aggregator base\\\\n        AggregatorBase base;\\\\n    }\\\\n\\\\n    /// @notice Chainlink Aggregators\\\\n    mapping(address => AggregatorInfo) public aggregators;\\\\n\\\\n    /// @notice Mapping of crToken to y-vault token\\\\n    mapping(address => address) public yVaults;\\\\n\\\\n    /// @notice Mapping of crToken to curve swap\\\\n    mapping(address => address) public curveSwap;\\\\n\\\\n    /// @notice The v1 price oracle, maintain by CREAM\\\\n    V1PriceOracleInterface public v1PriceOracle;\\\\n\\\\n    /// @notice The ETH-USD aggregator address\\\\n    AggregatorV3Interface public ethUsdAggregator;\\\\n\\\\n    /**\\\\n     * @param admin_ The address of admin to set aggregators\\\\n     * @param v1PriceOracle_ The v1 price oracle\\\\n     */\\\\n    constructor(\\\\n        address admin_,\\\\n        address v1PriceOracle_,\\\\n        address ethUsdAggregator_\\\\n    ) public {\\\\n        admin = admin_;\\\\n        v1PriceOracle = V1PriceOracleInterface(v1PriceOracle_);\\\\n        ethUsdAggregator = AggregatorV3Interface(ethUsdAggregator_);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Get the underlying price of a listed cToken asset\\\\n     * @param cToken The cToken to get the underlying price of\\\\n     * @return The underlying asset price mantissa (scaled by 1e18)\\\\n     */\\\\n    function getUnderlyingPrice(CToken cToken) public view returns (uint256) {\\\\n        address cTokenAddress = address(cToken);\\\\n\\\\n        AggregatorInfo memory aggregatorInfo = aggregators[cTokenAddress];\\\\n        if (address(aggregatorInfo.source) != address(0)) {\\\\n            uint256 price = getPriceFromChainlink(aggregatorInfo.source);\\\\n            if (aggregatorInfo.base == AggregatorBase.ETH) {\\\\n                // Convert the price to USD based if it\'s ETH based.\\\\n                price = mul_(price, Exp({mantissa: getPriceFromChainlink(ethUsdAggregator)}));\\\\n            }\\\\n            uint256 underlyingDecimals = EIP20Interface(CErc20(cTokenAddress).underlying()).decimals();\\\\n            return mul_(price, 10**(18 - underlyingDecimals));\\\\n        }\\\\n\\\\n        return getPriceFromV1(cTokenAddress);\\\\n    }\\\\n\\\\n    /*** Internal fucntions ***/\\\\n\\\\n    /**\\\\n     * @notice Get price from ChainLink\\\\n     * @param aggregator The ChainLink aggregator to get the price of\\\\n     * @return The price\\\\n     */\\\\n    function getPriceFromChainlink(AggregatorV3Interface aggregator) internal view returns (uint256) {\\\\n        (, int256 price, , , ) = aggregator.latestRoundData();\\\\n        require(price > 0, \\\\\\"invalid price\\\\\\");\\\\n\\\\n        // Extend the decimals to 1e18.\\\\n        return mul_(uint256(price), 10**(18 - uint256(aggregator.decimals())));\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Get price from v1 price oracle\\\\n     * @param cTokenAddress The CToken address\\\\n     * @return The price\\\\n     */\\\\n    function getPriceFromV1(address cTokenAddress) internal view returns (uint256) {\\\\n        address underlying = CErc20(cTokenAddress).underlying();\\\\n        return v1PriceOracle.assetPrices(underlying);\\\\n    }\\\\n\\\\n    /*** Admin or guardian functions ***/\\\\n\\\\n    event AggregatorUpdated(address cTokenAddress, address source, AggregatorBase base);\\\\n    event SetGuardian(address guardian);\\\\n    event SetAdmin(address admin);\\\\n\\\\n    /**\\\\n     * @notice Set guardian for price oracle proxy\\\\n     * @param _guardian The new guardian\\\\n     */\\\\n    function _setGuardian(address _guardian) external {\\\\n        require(msg.sender == admin, \\\\\\"only the admin may set new guardian\\\\\\");\\\\n        guardian = _guardian;\\\\n        emit SetGuardian(guardian);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Set admin for price oracle proxy\\\\n     * @param _admin The new admin\\\\n     */\\\\n    function _setAdmin(address _admin) external {\\\\n        require(msg.sender == admin, \\\\\\"only the admin may set new admin\\\\\\");\\\\n        admin = _admin;\\\\n        emit SetAdmin(admin);\\\\n    }\\\\n\\\\n    function _setNativeUSDAggregator(address _aggregator) external {\\\\n        require(msg.sender == admin, \\\\\\"only the admin may change the native USD aggregator\\\\\\");\\\\n        ethUsdAggregator = AggregatorV3Interface(_aggregator);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Set ChainLink aggregators for multiple cTokens\\\\n     * @param cTokenAddresses The list of cTokens\\\\n     * @param sources The list of ChainLink aggregator sources\\\\n     * @param bases The list of ChainLink aggregator bases\\\\n     */\\\\n    function _setAggregators(\\\\n        address[] calldata cTokenAddresses,\\\\n        address[] calldata sources,\\\\n        AggregatorBase[] calldata bases\\\\n    ) external {\\\\n        require(msg.sender == admin || msg.sender == guardian, \\\\\\"only the admin or guardian may set the aggregators\\\\\\");\\\\n        require(cTokenAddresses.length == sources.length && cTokenAddresses.length == bases.length, \\\\\\"mismatched data\\\\\\");\\\\n        for (uint256 i = 0; i < cTokenAddresses.length; i++) {\\\\n            if (sources[i] != address(0)) {\\\\n                require(msg.sender == admin, \\\\\\"guardian may only clear the aggregator\\\\\\");\\\\n            }\\\\n            aggregators[cTokenAddresses[i]] = AggregatorInfo({\\\\n                source: AggregatorV3Interface(sources[i]),\\\\n                base: bases[i]\\\\n            });\\\\n            emit AggregatorUpdated(cTokenAddresses[i], sources[i], bases[i]);\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x6cef48d09af23c83bed0816d2af551d04e8052f7a75f050e56bd5b140f8a7938\\"},\\"contracts/PriceOracle/interfaces/AggregatorV3Interface.sol\\":{\\"content\\":\\"pragma solidity ^0.5.16;\\\\n\\\\ninterface AggregatorV3Interface {\\\\n    function decimals() external view returns (uint8);\\\\n\\\\n    function description() external view returns (string memory);\\\\n\\\\n    function version() external view returns (uint256);\\\\n\\\\n    // getRoundData and latestRoundData should both raise \\\\\\"No data present\\\\\\"\\\\n    // if they do not have data to report, instead of returning unset values\\\\n    // which could be misinterpreted as actual reported values.\\\\n    function getRoundData(uint80 _roundId)\\\\n        external\\\\n        view\\\\n        returns (\\\\n            uint80 roundId,\\\\n            int256 answer,\\\\n            uint256 startedAt,\\\\n            uint256 updatedAt,\\\\n            uint80 answeredInRound\\\\n        );\\\\n\\\\n    function latestRoundData()\\\\n        external\\\\n        view\\\\n        returns (\\\\n            uint80 roundId,\\\\n            int256 answer,\\\\n            uint256 startedAt,\\\\n            uint256 updatedAt,\\\\n            uint80 answeredInRound\\\\n        );\\\\n}\\\\n\\",\\"keccak256\\":\\"0xc6f90a1bf1d47b7b56936e056db91a9702d887f595da59e595dc85878c401396\\"},\\"contracts/PriceOracle/interfaces/V1PriceOracleInterface.sol\\":{\\"content\\":\\"pragma solidity ^0.5.16;\\\\n\\\\ninterface V1PriceOracleInterface {\\\\n    function assetPrices(address asset) external view returns (uint256);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd95be4901a987cc0f4e63e11e767f0f49d2ec39dcf12be1270db75e6ec34aef5\\"}},\\"version\\":1}","bytecode":"0x608060405234801561001057600080fd5b50604051610f2d380380610f2d8339818101604052606081101561003357600080fd5b5080516020820151604090920151600080546001600160a01b039384166001600160a01b0319918216179091556005805494841694821694909417909355600680549290911691909216179055610e9e8061008f6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063452a932011610071578063452a9320146102bf57806395ed7da3146102c7578063e38e8c0f146102ed578063f851a44014610313578063fc57d4df1461031b578063fe10c98d14610353576100b4565b806305631658146100b957806307eb1cc0146101cf57806310236026146101f5578063112cdab9146102195780631b1c4f23146102735780633a74a76714610299575b600080fd5b6101cd600480360360608110156100cf57600080fd5b8101906020810181356401000000008111156100ea57600080fd5b8201836020820111156100fc57600080fd5b8035906020019184602083028401116401000000008311171561011e57600080fd5b91939092909160208101903564010000000081111561013c57600080fd5b82018360208201111561014e57600080fd5b8035906020019184602083028401116401000000008311171561017057600080fd5b91939092909160208101903564010000000081111561018e57600080fd5b8201836020820111156101a057600080fd5b803590602001918460208302840111640100000000831117156101c257600080fd5b50909250905061035b565b005b6101cd600480360360208110156101e557600080fd5b50356001600160a01b031661062d565b6101fd610698565b604080516001600160a01b039092168252519081900360200190f35b61023f6004803603602081101561022f57600080fd5b50356001600160a01b03166106a7565b6040516001600160a01b03831681526020810182600181111561025e57fe5b60ff1681526020019250505060405180910390f35b6101fd6004803603602081101561028957600080fd5b50356001600160a01b03166106ce565b6101cd600480360360208110156102af57600080fd5b50356001600160a01b03166106e9565b6101fd6107a2565b6101fd600480360360208110156102dd57600080fd5b50356001600160a01b03166107b1565b6101cd6004803603602081101561030357600080fd5b50356001600160a01b03166107cc565b6101fd61086f565b6103416004803603602081101561033157600080fd5b50356001600160a01b031661087e565b60408051918252519081900360200190f35b6101fd610a55565b6000546001600160a01b031633148061037e57506001546001600160a01b031633145b6103b95760405162461bcd60e51b8152600401808060200182810382526032815260200180610def6032913960400191505060405180910390fd5b84831480156103c757508481145b61040a576040805162461bcd60e51b815260206004820152600f60248201526e6d69736d617463686564206461746160881b604482015290519081900360640190fd5b60005b8581101561062457600085858381811061042357fe5b905060200201356001600160a01b03166001600160a01b03161461048a576000546001600160a01b0316331461048a5760405162461bcd60e51b8152600401808060200182810382526026815260200180610e446026913960400191505060405180910390fd5b60405180604001604052808686848181106104a157fe5b905060200201356001600160a01b03166001600160a01b031681526020018484848181106104cb57fe5b905060200201356001811180156104e157600080fd5b5060018111156104ed57fe5b9052600260008989858181106104ff57fe5b602090810292909201356001600160a01b03908116845283830194909452506040909101600020835181546001600160a01b0319169316929092178083559083015190829060ff60a01b1916600160a01b83600181111561055c57fe5b02179055509050507f59a3f269886d3e5164a5f1e2c292c20122d475aa7a1d0f79c0e46d10ff3eae3887878381811061059157fe5b905060200201356001600160a01b03168686848181106105ad57fe5b905060200201356001600160a01b03168585858181106105c957fe5b905060200201356001811180156105df57600080fd5b50604080516001600160a01b0380861682528416602082015290810182600181111561060757fe5b60ff168152602001935050505060405180910390a160010161040d565b50505050505050565b6000546001600160a01b031633146106765760405162461bcd60e51b8152600401808060200182810382526033815260200180610dbc6033913960400191505060405180910390fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b031681565b6002602052600090815260409020546001600160a01b03811690600160a01b900460ff1682565b6004602052600090815260409020546001600160a01b031681565b6000546001600160a01b03163314610748576040805162461bcd60e51b815260206004820181905260248201527f6f6e6c79207468652061646d696e206d617920736574206e65772061646d696e604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b03838116919091179182905560408051929091168252517f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a1916020908290030190a150565b6001546001600160a01b031681565b6003602052600090815260409020546001600160a01b031681565b6000546001600160a01b031633146108155760405162461bcd60e51b8152600401808060200182810382526023815260200180610e216023913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b03838116919091179182905560408051929091168252517f31845eceb9cde510c7e8b37f76301c688feb70bc9653aa4c28a3734999840fd8916020908290030190a150565b6000546001600160a01b031681565b600081610889610da4565b6001600160a01b03828116600090815260026020908152604091829020825180840190935280549384168352919290830190600160a01b900460ff1660018111156108d057fe5b60018111156108db57fe5b90525080519091506001600160a01b031615610a425760006109008260000151610a64565b905060018260200151600181111561091457fe5b141561094c5760408051602081019091526006546109499183918190610942906001600160a01b0316610a64565b9052610b94565b90505b6000836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561098757600080fd5b505afa15801561099b573d6000803e3d6000fd5b505050506040513d60208110156109b157600080fd5b50516040805163313ce56760e01b815290516001600160a01b039092169163313ce56791600480820192602092909190829003018186803b1580156109f557600080fd5b505afa158015610a09573d6000803e3d6000fd5b505050506040513d6020811015610a1f57600080fd5b505160ff169050610a37826012839003600a0a610bbc565b945050505050610a50565b610a4b82610bfe565b925050505b919050565b6005546001600160a01b031681565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610aa057600080fd5b505afa158015610ab4573d6000803e3d6000fd5b505050506040513d60a0811015610aca57600080fd5b5060200151905060008113610b16576040805162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b604482015290519081900360640190fd5b610b8d81846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5357600080fd5b505afa158015610b67573d6000803e3d6000fd5b505050506040513d6020811015610b7d57600080fd5b505160ff16601203600a0a610bbc565b9392505050565b6000670de0b6b3a7640000610bad848460000151610bbc565b81610bb457fe5b049392505050565b6000610b8d83836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250610ce8565b600080826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3a57600080fd5b505afa158015610c4e573d6000803e3d6000fd5b505050506040513d6020811015610c6457600080fd5b5051600554604080516317a6948f60e21b81526001600160a01b0380851660048301529151939450911691635e9a523c91602480820192602092909190829003018186803b158015610cb557600080fd5b505afa158015610cc9573d6000803e3d6000fd5b505050506040513d6020811015610cdf57600080fd5b50519392505050565b6000831580610cf5575082155b15610d0257506000610b8d565b83830283858281610d0f57fe5b04148390610d9b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610d60578181015183820152602001610d48565b50505050905090810190601f168015610d8d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50949350505050565b60408051808201909152600080825260208201529056fe6f6e6c79207468652061646d696e206d6179206368616e676520746865206e6174697665205553442061676772656761746f726f6e6c79207468652061646d696e206f7220677561726469616e206d617920736574207468652061676772656761746f72736f6e6c79207468652061646d696e206d617920736574206e657720677561726469616e677561726469616e206d6179206f6e6c7920636c656172207468652061676772656761746f72a265627a7a72315820310be7afe450336452848be0534a649f164fa22dc8939d83607bc3b9849a16a464736f6c63430005110032","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063452a932011610071578063452a9320146102bf57806395ed7da3146102c7578063e38e8c0f146102ed578063f851a44014610313578063fc57d4df1461031b578063fe10c98d14610353576100b4565b806305631658146100b957806307eb1cc0146101cf57806310236026146101f5578063112cdab9146102195780631b1c4f23146102735780633a74a76714610299575b600080fd5b6101cd600480360360608110156100cf57600080fd5b8101906020810181356401000000008111156100ea57600080fd5b8201836020820111156100fc57600080fd5b8035906020019184602083028401116401000000008311171561011e57600080fd5b91939092909160208101903564010000000081111561013c57600080fd5b82018360208201111561014e57600080fd5b8035906020019184602083028401116401000000008311171561017057600080fd5b91939092909160208101903564010000000081111561018e57600080fd5b8201836020820111156101a057600080fd5b803590602001918460208302840111640100000000831117156101c257600080fd5b50909250905061035b565b005b6101cd600480360360208110156101e557600080fd5b50356001600160a01b031661062d565b6101fd610698565b604080516001600160a01b039092168252519081900360200190f35b61023f6004803603602081101561022f57600080fd5b50356001600160a01b03166106a7565b6040516001600160a01b03831681526020810182600181111561025e57fe5b60ff1681526020019250505060405180910390f35b6101fd6004803603602081101561028957600080fd5b50356001600160a01b03166106ce565b6101cd600480360360208110156102af57600080fd5b50356001600160a01b03166106e9565b6101fd6107a2565b6101fd600480360360208110156102dd57600080fd5b50356001600160a01b03166107b1565b6101cd6004803603602081101561030357600080fd5b50356001600160a01b03166107cc565b6101fd61086f565b6103416004803603602081101561033157600080fd5b50356001600160a01b031661087e565b60408051918252519081900360200190f35b6101fd610a55565b6000546001600160a01b031633148061037e57506001546001600160a01b031633145b6103b95760405162461bcd60e51b8152600401808060200182810382526032815260200180610def6032913960400191505060405180910390fd5b84831480156103c757508481145b61040a576040805162461bcd60e51b815260206004820152600f60248201526e6d69736d617463686564206461746160881b604482015290519081900360640190fd5b60005b8581101561062457600085858381811061042357fe5b905060200201356001600160a01b03166001600160a01b03161461048a576000546001600160a01b0316331461048a5760405162461bcd60e51b8152600401808060200182810382526026815260200180610e446026913960400191505060405180910390fd5b60405180604001604052808686848181106104a157fe5b905060200201356001600160a01b03166001600160a01b031681526020018484848181106104cb57fe5b905060200201356001811180156104e157600080fd5b5060018111156104ed57fe5b9052600260008989858181106104ff57fe5b602090810292909201356001600160a01b03908116845283830194909452506040909101600020835181546001600160a01b0319169316929092178083559083015190829060ff60a01b1916600160a01b83600181111561055c57fe5b02179055509050507f59a3f269886d3e5164a5f1e2c292c20122d475aa7a1d0f79c0e46d10ff3eae3887878381811061059157fe5b905060200201356001600160a01b03168686848181106105ad57fe5b905060200201356001600160a01b03168585858181106105c957fe5b905060200201356001811180156105df57600080fd5b50604080516001600160a01b0380861682528416602082015290810182600181111561060757fe5b60ff168152602001935050505060405180910390a160010161040d565b50505050505050565b6000546001600160a01b031633146106765760405162461bcd60e51b8152600401808060200182810382526033815260200180610dbc6033913960400191505060405180910390fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b031681565b6002602052600090815260409020546001600160a01b03811690600160a01b900460ff1682565b6004602052600090815260409020546001600160a01b031681565b6000546001600160a01b03163314610748576040805162461bcd60e51b815260206004820181905260248201527f6f6e6c79207468652061646d696e206d617920736574206e65772061646d696e604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b03838116919091179182905560408051929091168252517f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a1916020908290030190a150565b6001546001600160a01b031681565b6003602052600090815260409020546001600160a01b031681565b6000546001600160a01b031633146108155760405162461bcd60e51b8152600401808060200182810382526023815260200180610e216023913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b03838116919091179182905560408051929091168252517f31845eceb9cde510c7e8b37f76301c688feb70bc9653aa4c28a3734999840fd8916020908290030190a150565b6000546001600160a01b031681565b600081610889610da4565b6001600160a01b03828116600090815260026020908152604091829020825180840190935280549384168352919290830190600160a01b900460ff1660018111156108d057fe5b60018111156108db57fe5b90525080519091506001600160a01b031615610a425760006109008260000151610a64565b905060018260200151600181111561091457fe5b141561094c5760408051602081019091526006546109499183918190610942906001600160a01b0316610a64565b9052610b94565b90505b6000836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561098757600080fd5b505afa15801561099b573d6000803e3d6000fd5b505050506040513d60208110156109b157600080fd5b50516040805163313ce56760e01b815290516001600160a01b039092169163313ce56791600480820192602092909190829003018186803b1580156109f557600080fd5b505afa158015610a09573d6000803e3d6000fd5b505050506040513d6020811015610a1f57600080fd5b505160ff169050610a37826012839003600a0a610bbc565b945050505050610a50565b610a4b82610bfe565b925050505b919050565b6005546001600160a01b031681565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610aa057600080fd5b505afa158015610ab4573d6000803e3d6000fd5b505050506040513d60a0811015610aca57600080fd5b5060200151905060008113610b16576040805162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b604482015290519081900360640190fd5b610b8d81846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5357600080fd5b505afa158015610b67573d6000803e3d6000fd5b505050506040513d6020811015610b7d57600080fd5b505160ff16601203600a0a610bbc565b9392505050565b6000670de0b6b3a7640000610bad848460000151610bbc565b81610bb457fe5b049392505050565b6000610b8d83836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250610ce8565b600080826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3a57600080fd5b505afa158015610c4e573d6000803e3d6000fd5b505050506040513d6020811015610c6457600080fd5b5051600554604080516317a6948f60e21b81526001600160a01b0380851660048301529151939450911691635e9a523c91602480820192602092909190829003018186803b158015610cb557600080fd5b505afa158015610cc9573d6000803e3d6000fd5b505050506040513d6020811015610cdf57600080fd5b50519392505050565b6000831580610cf5575082155b15610d0257506000610b8d565b83830283858281610d0f57fe5b04148390610d9b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610d60578181015183820152602001610d48565b50505050905090810190601f168015610d8d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50949350505050565b60408051808201909152600080825260208201529056fe6f6e6c79207468652061646d696e206d6179206368616e676520746865206e6174697665205553442061676772656761746f726f6e6c79207468652061646d696e206f7220677561726469616e206d617920736574207468652061676772656761746f72736f6e6c79207468652061646d696e206d617920736574206e657720677561726469616e677561726469616e206d6179206f6e6c7920636c656172207468652061676772656761746f72a265627a7a72315820310be7afe450336452848be0534a649f164fa22dc8939d83607bc3b9849a16a464736f6c63430005110032","devdoc":{"methods":{"_setAdmin(address)":{"params":{"_admin":"The new admin"}},"_setAggregators(address[],address[],uint8[])":{"params":{"bases":"The list of ChainLink aggregator bases","cTokenAddresses":"The list of cTokens","sources":"The list of ChainLink aggregator sources"}},"_setGuardian(address)":{"params":{"_guardian":"The new guardian"}},"constructor":{"params":{"admin_":"The address of admin to set aggregators","v1PriceOracle_":"The v1 price oracle"}},"getUnderlyingPrice(address)":{"params":{"cToken":"The cToken to get the underlying price of"},"return":"The underlying asset price mantissa (scaled by 1e18)"}}},"userdoc":{"methods":{"_setAdmin(address)":{"notice":"Set admin for price oracle proxy"},"_setAggregators(address[],address[],uint8[])":{"notice":"Set ChainLink aggregators for multiple cTokens"},"_setGuardian(address)":{"notice":"Set guardian for price oracle proxy"},"getUnderlyingPrice(address)":{"notice":"Get the underlying price of a listed cToken asset"}}},"storageLayout":{"storage":[{"astId":32082,"contract":"contracts/PriceOracle/PriceOracleProxyUSD.sol:PriceOracleProxyUSD","label":"admin","offset":0,"slot":"0","type":"t_address"},{"astId":32084,"contract":"contracts/PriceOracle/PriceOracleProxyUSD.sol:PriceOracleProxyUSD","label":"guardian","offset":0,"slot":"1","type":"t_address"},{"astId":32093,"contract":"contracts/PriceOracle/PriceOracleProxyUSD.sol:PriceOracleProxyUSD","label":"aggregators","offset":0,"slot":"2","type":"t_mapping(t_address,t_struct(AggregatorInfo)32089_storage)"},{"astId":32097,"contract":"contracts/PriceOracle/PriceOracleProxyUSD.sol:PriceOracleProxyUSD","label":"yVaults","offset":0,"slot":"3","type":"t_mapping(t_address,t_address)"},{"astId":32101,"contract":"contracts/PriceOracle/PriceOracleProxyUSD.sol:PriceOracleProxyUSD","label":"curveSwap","offset":0,"slot":"4","type":"t_mapping(t_address,t_address)"},{"astId":32103,"contract":"contracts/PriceOracle/PriceOracleProxyUSD.sol:PriceOracleProxyUSD","label":"v1PriceOracle","offset":0,"slot":"5","type":"t_contract(V1PriceOracleInterface)32994"},{"astId":32105,"contract":"contracts/PriceOracle/PriceOracleProxyUSD.sol:PriceOracleProxyUSD","label":"ethUsdAggregator","offset":0,"slot":"6","type":"t_contract(AggregatorV3Interface)32646"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_contract(AggregatorV3Interface)32646":{"encoding":"inplace","label":"contract AggregatorV3Interface","numberOfBytes":"20"},"t_contract(V1PriceOracleInterface)32994":{"encoding":"inplace","label":"contract V1PriceOracleInterface","numberOfBytes":"20"},"t_enum(AggregatorBase)32080":{"encoding":"inplace","label":"enum PriceOracleProxyUSD.AggregatorBase","numberOfBytes":"1"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_address,t_struct(AggregatorInfo)32089_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct PriceOracleProxyUSD.AggregatorInfo)","numberOfBytes":"32","value":"t_struct(AggregatorInfo)32089_storage"},"t_struct(AggregatorInfo)32089_storage":{"encoding":"inplace","label":"struct PriceOracleProxyUSD.AggregatorInfo","members":[{"astId":32086,"contract":"contracts/PriceOracle/PriceOracleProxyUSD.sol:PriceOracleProxyUSD","label":"source","offset":0,"slot":"0","type":"t_contract(AggregatorV3Interface)32646"},{"astId":32088,"contract":"contracts/PriceOracle/PriceOracleProxyUSD.sol:PriceOracleProxyUSD","label":"base","offset":20,"slot":"0","type":"t_enum(AggregatorBase)32080"}],"numberOfBytes":"32"}}}}')},303:function(e,n,t){},318:function(e,n){},321:function(e,n){},324:function(e,n){},328:function(e,n){},355:function(e,n){},357:function(e,n){},371:function(e,n){},373:function(e,n){},403:function(e,n){},405:function(e,n){},43:function(e){e.exports=JSON.parse('{"address":"0x7CEE908A7198501fBDeb26B160614FcCADB76b25","abi":[{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"action","type":"string"},{"indexed":false,"internalType":"bool","name":"pauseState","type":"bool"}],"name":"ActionPaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"contract CToken","name":"cToken","type":"address"},{"indexed":false,"internalType":"string","name":"action","type":"string"},{"indexed":false,"internalType":"bool","name":"pauseState","type":"bool"}],"name":"ActionPaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"protocol","type":"address"},{"indexed":false,"internalType":"address","name":"market","type":"address"},{"indexed":false,"internalType":"uint256","name":"creditLimit","type":"uint256"}],"name":"CreditLimitChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"error","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"info","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"detail","type":"uint256"}],"name":"Failure","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"contract CToken","name":"cToken","type":"address"}],"name":"MarketDelisted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"contract CToken","name":"cToken","type":"address"},{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"MarketEntered","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"contract CToken","name":"cToken","type":"address"},{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"MarketExited","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"contract CToken","name":"cToken","type":"address"}],"name":"MarketListed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract CToken","name":"cToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"newBorrowCap","type":"uint256"}],"name":"NewBorrowCap","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldBorrowCapGuardian","type":"address"},{"indexed":false,"internalType":"address","name":"newBorrowCapGuardian","type":"address"}],"name":"NewBorrowCapGuardian","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"contract CToken","name":"cToken","type":"address"},{"indexed":false,"internalType":"enum ComptrollerV1Storage.Version","name":"oldVersion","type":"uint8"},{"indexed":false,"internalType":"enum ComptrollerV1Storage.Version","name":"newVersion","type":"uint8"}],"name":"NewCTokenVersion","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldCloseFactorMantissa","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newCloseFactorMantissa","type":"uint256"}],"name":"NewCloseFactor","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"contract CToken","name":"cToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"oldCollateralFactorMantissa","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newCollateralFactorMantissa","type":"uint256"}],"name":"NewCollateralFactor","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldLiquidationIncentiveMantissa","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newLiquidationIncentiveMantissa","type":"uint256"}],"name":"NewLiquidationIncentive","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldLiquidityMining","type":"address"},{"indexed":false,"internalType":"address","name":"newLiquidityMining","type":"address"}],"name":"NewLiquidityMining","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldPauseGuardian","type":"address"},{"indexed":false,"internalType":"address","name":"newPauseGuardian","type":"address"}],"name":"NewPauseGuardian","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"contract PriceOracle","name":"oldPriceOracle","type":"address"},{"indexed":false,"internalType":"contract PriceOracle","name":"newPriceOracle","type":"address"}],"name":"NewPriceOracle","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract CToken","name":"cToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"newSupplyCap","type":"uint256"}],"name":"NewSupplyCap","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldSupplyCapGuardian","type":"address"},{"indexed":false,"internalType":"address","name":"newSupplyCapGuardian","type":"address"}],"name":"NewSupplyCapGuardian","type":"event"},{"constant":false,"inputs":[{"internalType":"contract Unitroller","name":"unitroller","type":"address"}],"name":"_become","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"_borrowGuardianPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"contract CToken","name":"cToken","type":"address"}],"name":"_delistMarket","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"_mintGuardianPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"newBorrowCapGuardian","type":"address"}],"name":"_setBorrowCapGuardian","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"contract CToken","name":"cToken","type":"address"},{"internalType":"bool","name":"state","type":"bool"}],"name":"_setBorrowPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"newCloseFactorMantissa","type":"uint256"}],"name":"_setCloseFactor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"contract CToken","name":"cToken","type":"address"},{"internalType":"uint256","name":"newCollateralFactorMantissa","type":"uint256"}],"name":"_setCollateralFactor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"protocol","type":"address"},{"internalType":"address","name":"market","type":"address"},{"internalType":"uint256","name":"creditLimit","type":"uint256"}],"name":"_setCreditLimit","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"contract CToken","name":"cToken","type":"address"},{"internalType":"bool","name":"state","type":"bool"}],"name":"_setFlashloanPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"newLiquidationIncentiveMantissa","type":"uint256"}],"name":"_setLiquidationIncentive","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"newLiquidityMining","type":"address"}],"name":"_setLiquidityMining","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"contract CToken[]","name":"cTokens","type":"address[]"},{"internalType":"uint256[]","name":"newBorrowCaps","type":"uint256[]"}],"name":"_setMarketBorrowCaps","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"contract CToken[]","name":"cTokens","type":"address[]"},{"internalType":"uint256[]","name":"newSupplyCaps","type":"uint256[]"}],"name":"_setMarketSupplyCaps","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"contract CToken","name":"cToken","type":"address"},{"internalType":"bool","name":"state","type":"bool"}],"name":"_setMintPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"newPauseGuardian","type":"address"}],"name":"_setPauseGuardian","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"contract PriceOracle","name":"newOracle","type":"address"}],"name":"_setPriceOracle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bool","name":"state","type":"bool"}],"name":"_setSeizePaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"newSupplyCapGuardian","type":"address"}],"name":"_setSupplyCapGuardian","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bool","name":"state","type":"bool"}],"name":"_setTransferPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"contract CToken","name":"cToken","type":"address"},{"internalType":"enum ComptrollerV1Storage.Version","name":"version","type":"uint8"}],"name":"_supportMarket","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"accountAssets","outputs":[{"internalType":"contract CToken","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"admin","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"allMarkets","outputs":[{"internalType":"contract CToken","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"cToken","type":"address"},{"internalType":"address","name":"borrower","type":"address"},{"internalType":"uint256","name":"borrowAmount","type":"uint256"}],"name":"borrowAllowed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"borrowCapGuardian","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"borrowCaps","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"borrowGuardianPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"cToken","type":"address"},{"internalType":"address","name":"borrower","type":"address"},{"internalType":"uint256","name":"borrowAmount","type":"uint256"}],"name":"borrowVerify","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"contract CToken","name":"cToken","type":"address"}],"name":"checkMembership","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"closeFactorMantissa","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"comptrollerImplementation","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"creditLimits","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address[]","name":"cTokens","type":"address[]"}],"name":"enterMarkets","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"cTokenAddress","type":"address"}],"name":"exitMarket","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"cToken","type":"address"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"params","type":"bytes"}],"name":"flashloanAllowed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"flashloanGuardianPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getAccountLiquidity","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getAllMarkets","outputs":[{"internalType":"contract CToken[]","name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getAssetsIn","outputs":[{"internalType":"contract CToken[]","name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getBlockNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"cTokenModify","type":"address"},{"internalType":"uint256","name":"redeemTokens","type":"uint256"},{"internalType":"uint256","name":"borrowAmount","type":"uint256"}],"name":"getHypotheticalAccountLiquidity","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isComptroller","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"cToken","type":"address"}],"name":"isCreditAccount","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"isMarkertDelisted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"cTokenAddress","type":"address"}],"name":"isMarketListed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"cTokenBorrowed","type":"address"},{"internalType":"address","name":"cTokenCollateral","type":"address"},{"internalType":"address","name":"liquidator","type":"address"},{"internalType":"address","name":"borrower","type":"address"},{"internalType":"uint256","name":"repayAmount","type":"uint256"}],"name":"liquidateBorrowAllowed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"cTokenBorrowed","type":"address"},{"internalType":"address","name":"cTokenCollateral","type":"address"},{"internalType":"address","name":"liquidator","type":"address"},{"internalType":"address","name":"borrower","type":"address"},{"internalType":"uint256","name":"actualRepayAmount","type":"uint256"},{"internalType":"uint256","name":"seizeTokens","type":"uint256"}],"name":"liquidateBorrowVerify","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"cTokenBorrowed","type":"address"},{"internalType":"address","name":"cTokenCollateral","type":"address"},{"internalType":"uint256","name":"actualRepayAmount","type":"uint256"}],"name":"liquidateCalculateSeizeTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"liquidationIncentiveMantissa","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"liquidityMining","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"markets","outputs":[{"internalType":"bool","name":"isListed","type":"bool"},{"internalType":"uint256","name":"collateralFactorMantissa","type":"uint256"},{"internalType":"enum ComptrollerV1Storage.Version","name":"version","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"cToken","type":"address"},{"internalType":"address","name":"minter","type":"address"},{"internalType":"uint256","name":"mintAmount","type":"uint256"}],"name":"mintAllowed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"mintGuardianPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"cToken","type":"address"},{"internalType":"address","name":"minter","type":"address"},{"internalType":"uint256","name":"actualMintAmount","type":"uint256"},{"internalType":"uint256","name":"mintTokens","type":"uint256"}],"name":"mintVerify","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"oracle","outputs":[{"internalType":"contract PriceOracle","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"pauseGuardian","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"pendingAdmin","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"pendingComptrollerImplementation","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"cToken","type":"address"},{"internalType":"address","name":"redeemer","type":"address"},{"internalType":"uint256","name":"redeemTokens","type":"uint256"}],"name":"redeemAllowed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"cToken","type":"address"},{"internalType":"address","name":"redeemer","type":"address"},{"internalType":"uint256","name":"redeemAmount","type":"uint256"},{"internalType":"uint256","name":"redeemTokens","type":"uint256"}],"name":"redeemVerify","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"cToken","type":"address"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"borrower","type":"address"},{"internalType":"uint256","name":"repayAmount","type":"uint256"}],"name":"repayBorrowAllowed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"cToken","type":"address"},{"internalType":"address","name":"payer","type":"address"},{"internalType":"address","name":"borrower","type":"address"},{"internalType":"uint256","name":"actualRepayAmount","type":"uint256"},{"internalType":"uint256","name":"borrowerIndex","type":"uint256"}],"name":"repayBorrowVerify","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"cTokenCollateral","type":"address"},{"internalType":"address","name":"cTokenBorrowed","type":"address"},{"internalType":"address","name":"liquidator","type":"address"},{"internalType":"address","name":"borrower","type":"address"},{"internalType":"uint256","name":"seizeTokens","type":"uint256"}],"name":"seizeAllowed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"seizeGuardianPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"cTokenCollateral","type":"address"},{"internalType":"address","name":"cTokenBorrowed","type":"address"},{"internalType":"address","name":"liquidator","type":"address"},{"internalType":"address","name":"borrower","type":"address"},{"internalType":"uint256","name":"seizeTokens","type":"uint256"}],"name":"seizeVerify","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"supplyCapGuardian","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"supplyCaps","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"cToken","type":"address"},{"internalType":"address","name":"src","type":"address"},{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"transferTokens","type":"uint256"}],"name":"transferAllowed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"transferGuardianPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"cToken","type":"address"},{"internalType":"address","name":"src","type":"address"},{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"transferTokens","type":"uint256"}],"name":"transferVerify","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"cToken","type":"address"},{"internalType":"enum ComptrollerV1Storage.Version","name":"newVersion","type":"uint8"}],"name":"updateCTokenVersion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]}')},497:function(e,n){},498:function(e,n){},50:function(e){e.exports=JSON.parse('{"_format":"hh-sol-artifact-1","contractName":"CErc20","sourceName":"contracts/CErc20.sol","abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"cashPrior","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"interestAccumulated","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"borrowIndex","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalBorrows","type":"uint256"}],"name":"AccrueInterest","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"borrower","type":"address"},{"indexed":false,"internalType":"uint256","name":"borrowAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"accountBorrows","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalBorrows","type":"uint256"}],"name":"Borrow","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"error","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"info","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"detail","type":"uint256"}],"name":"Failure","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"liquidator","type":"address"},{"indexed":false,"internalType":"address","name":"borrower","type":"address"},{"indexed":false,"internalType":"uint256","name":"repayAmount","type":"uint256"},{"indexed":false,"internalType":"address","name":"cTokenCollateral","type":"address"},{"indexed":false,"internalType":"uint256","name":"seizeTokens","type":"uint256"}],"name":"LiquidateBorrow","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"minter","type":"address"},{"indexed":false,"internalType":"uint256","name":"mintAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"mintTokens","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"NewAdmin","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"contract ComptrollerInterface","name":"oldComptroller","type":"address"},{"indexed":false,"internalType":"contract ComptrollerInterface","name":"newComptroller","type":"address"}],"name":"NewComptroller","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"contract InterestRateModel","name":"oldInterestRateModel","type":"address"},{"indexed":false,"internalType":"contract InterestRateModel","name":"newInterestRateModel","type":"address"}],"name":"NewMarketInterestRateModel","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldPendingAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newPendingAdmin","type":"address"}],"name":"NewPendingAdmin","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldReserveFactorMantissa","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newReserveFactorMantissa","type":"uint256"}],"name":"NewReserveFactor","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"redeemer","type":"address"},{"indexed":false,"internalType":"uint256","name":"redeemAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"redeemTokens","type":"uint256"}],"name":"Redeem","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"payer","type":"address"},{"indexed":false,"internalType":"address","name":"borrower","type":"address"},{"indexed":false,"internalType":"uint256","name":"repayAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"accountBorrows","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalBorrows","type":"uint256"}],"name":"RepayBorrow","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"benefactor","type":"address"},{"indexed":false,"internalType":"uint256","name":"addAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newTotalReserves","type":"uint256"}],"name":"ReservesAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"admin","type":"address"},{"indexed":false,"internalType":"uint256","name":"reduceAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newTotalReserves","type":"uint256"}],"name":"ReservesReduced","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Transfer","type":"event"},{"constant":false,"inputs":[],"name":"_acceptAdmin","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"addAmount","type":"uint256"}],"name":"_addReserves","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"reduceAmount","type":"uint256"}],"name":"_reduceReserves","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"contract ComptrollerInterface","name":"newComptroller","type":"address"}],"name":"_setComptroller","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"contract InterestRateModel","name":"newInterestRateModel","type":"address"}],"name":"_setInterestRateModel","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address payable","name":"newPendingAdmin","type":"address"}],"name":"_setPendingAdmin","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"newReserveFactorMantissa","type":"uint256"}],"name":"_setReserveFactor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"accrualBlockNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"accrueInterest","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"admin","outputs":[{"internalType":"address payable","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOfUnderlying","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"borrowAmount","type":"uint256"}],"name":"borrow","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"borrowBalanceCurrent","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"borrowBalanceStored","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"borrowIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"borrowRatePerBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"comptroller","outputs":[{"internalType":"contract ComptrollerInterface","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"change","type":"uint256"},{"internalType":"bool","name":"repay","type":"bool"}],"name":"estimateBorrowRatePerBlockAfterChange","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"change","type":"uint256"},{"internalType":"bool","name":"repay","type":"bool"}],"name":"estimateSupplyRatePerBlockAfterChange","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"exchangeRateCurrent","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"exchangeRateStored","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getAccountSnapshot","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getCash","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"underlying_","type":"address"},{"internalType":"contract ComptrollerInterface","name":"comptroller_","type":"address"},{"internalType":"contract InterestRateModel","name":"interestRateModel_","type":"address"},{"internalType":"uint256","name":"initialExchangeRateMantissa_","type":"uint256"},{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"},{"internalType":"uint8","name":"decimals_","type":"uint8"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"contract ComptrollerInterface","name":"comptroller_","type":"address"},{"internalType":"contract InterestRateModel","name":"interestRateModel_","type":"address"},{"internalType":"uint256","name":"initialExchangeRateMantissa_","type":"uint256"},{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"},{"internalType":"uint8","name":"decimals_","type":"uint8"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"interestRateModel","outputs":[{"internalType":"contract InterestRateModel","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isCToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"borrower","type":"address"},{"internalType":"uint256","name":"repayAmount","type":"uint256"},{"internalType":"contract CTokenInterface","name":"cTokenCollateral","type":"address"}],"name":"liquidateBorrow","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"mintAmount","type":"uint256"}],"name":"mint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"pendingAdmin","outputs":[{"internalType":"address payable","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"redeemTokens","type":"uint256"}],"name":"redeem","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"redeemAmount","type":"uint256"}],"name":"redeemUnderlying","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"repayAmount","type":"uint256"}],"name":"repayBorrow","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"borrower","type":"address"},{"internalType":"uint256","name":"repayAmount","type":"uint256"}],"name":"repayBorrowBehalf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"reserveFactorMantissa","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"liquidator","type":"address"},{"internalType":"address","name":"borrower","type":"address"},{"internalType":"uint256","name":"seizeTokens","type":"uint256"}],"name":"seize","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"supplyRatePerBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalBorrows","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"totalBorrowsCurrent","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalReserves","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"src","type":"address"},{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"underlying","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}],"bytecode":"","deployedBytecode":"","linkReferences":{},"deployedLinkReferences":{}}')},601:function(e,n,t){"use strict";t.r(n);var a=t(0),r=t.n(a),s=t(45),o=t.n(s),i=(t(303),t(28)),d=t(10),c=t(11),u=t(18),l=t(19),b=t(23),f=t(14),p=t.n(f),m=(t(113),t(256)),y=t(265),h=t(103),T=t.n(h),w=t(268),g=t.n(w),v=t(6),E=t(258),k=t(259),A=t(260),x=t(261),R=t(262),_=t(257),C=t(612),I=t(111),S=t(254),O=function(){var e=Object(i.a)(p.a.mark((function e(n,t,a){var r,s;return p.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,t.connect();case 3:if("0x30da5"===(r=e.sent).chainId){e.next=6;break}return e.abrupt("return",n({title:"Wallet Error",description:"Wrong Network, please connect to Milkomeda",status:"error",duration:6e3,isClosable:!0}));case 6:s=new T.a(r),a(s,r),n({title:"Connected!",description:"Successfully connected to Milkomeda",status:"success",duration:6e3,isClosable:!0}),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(0),n({title:"Wallet Error",description:"Error when trying to connect to wallet.",status:"error",duration:6e3,isClosable:!0});case 14:case"end":return e.stop()}}),e,null,[[0,11]])})));return function(n,t,a){return e.apply(this,arguments)}}(),M=function(e){return 0===Object.keys(e).length},N=t(110),B=t(50),P=t(43),F=t(167),D=t(4);var j,L=function(e){var n=e.condition,t=e.wrapper,a=e.children;return n?t(a):a},U=function(e){Object(u.a)(t,e);var n=Object(l.a)(t);function t(){var e;Object(d.a)(this,t);for(var a=arguments.length,r=new Array(a),s=0;s<a;s++)r[s]=arguments[s];return(e=n.call.apply(n,[this].concat(r))).state={supplyState:"Lend",borrowState:"Borrow",supplyIconButtonOpen:!1,borrowIconButtonOpen:!1,supplySliderValue:0,borrowSliderValue:0,supplySelectedToken:"",borowSelectedToken:"",tokenBalances:{},mTokenBalances:{},tokenPrices:{},borrowBalances:{},exchangeRateMantissas:{},accountLiquidity:0,tokenLiquidity:{},tokenCollateralFactors:{},tokenAPY:{},supplyAmount:0,borrowAmount:0,enteredMarkets:[],accountShortfall:0},e.getBalances=function(){if(!M(e.props.web3)&&e.props.web3._provider.selectedAddress){for(var n=0,t=["WADA","USDC"];n<t.length;n++){var a=t[n];e.getUnderlyingTokenBalance(a),e.getTokenBalance(a),e.getTokenAPY(a),e.getBorrowBalance(a),e.getTokenLiquidity(a),e.getCollateralFactor(a),e.getTokenPriceFromOracle(a)}e.getEnteredMarkets(),e.getAccountLiquidity()}},e.getUnderlyingTokenInfo=function(e){switch(e){case"WADA":return"0x65a51E52eCD17B641f8F0D1d56a6c9738951FDC9";case"USDC":return"0xC12F6Ee5c853393105f29EF0310e61e6B494a70F"}},e.getUnderlyingTokenBalance=function(){var n=Object(i.a)(p.a.mark((function n(t){var a,r,s,o,i;return p.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return a=e.props.web3,r=e.state.tokenBalances,s=e.getUnderlyingTokenInfo(t),o=new a.eth.Contract(N.abi,s),n.next=6,o.methods.balanceOf(a._provider.selectedAddress).call();case 6:i=n.sent,r[t]=i,e.setState({tokenBalances:r});case 9:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}(),e.getUnderlyingTokenDecimals=function(e){switch(e){case"WADA":return 18;case"USDC":return 6}},e.getTokenInfo=function(e){switch(e){case"WADA":return"0x7D7F58a98e7923578B40fF4C54C701350Db5845C";case"USDC":return"0xBF2a1ba18bAEA5ac2cD4A3C2Ca0D7484C1dd8651"}},e.getTokenInfoFromAddress=function(e){switch(e){case"0x7D7F58a98e7923578B40fF4C54C701350Db5845C":return"WADA";case"0xBF2a1ba18bAEA5ac2cD4A3C2Ca0D7484C1dd8651":return"USDC"}},e.getTokenBalance=function(){var n=Object(i.a)(p.a.mark((function n(t){var a,r,s,o,i;return p.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return a=e.props.web3,r=e.state.mTokenBalances,s=e.getTokenInfo(t),o=new a.eth.Contract(B.abi,s),n.next=6,o.methods.balanceOfUnderlying(a._provider.selectedAddress).call();case 6:i=n.sent,r[t]=i,e.setState({mTokenBalances:r});case 9:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}(),e.getTokenAPY=function(){var n=Object(i.a)(p.a.mark((function n(t){var a,r,s,o,i,d,c,u,l,b,f;return p.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return a=e.props.web3,r=e.state.tokenAPY,s=e.getTokenInfo(t),o=new a.eth.Contract(B.abi,s),i=1e18,d=21600,c=365,n.next=9,o.methods.supplyRatePerBlock().call();case 9:return u=n.sent,n.next=12,o.methods.borrowRatePerBlock().call();case 12:l=n.sent,b=100*(Math.pow(u/i*d+1,c)-1),f=100*(Math.pow(l/i*d+1,c)-1),r[t]={supplyAPY:b,borrowAPY:f};case 16:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}(),e.getBorrowLimit=function(){var n,t=e.state,a=t.accountLiquidity,r=t.borrowSelectedToken,s=t.tokenPrices,o=t.tokenCollateralFactors;if(null!==(n=e.props.web3._provider)&&void 0!==n&&n.selectedAddress&&r){var i=s[r];o[r];return"".concat((a/i).toFixed(2))}return"-"},e.getBorrowLimitTokens=function(){var n,t=e.state,a=t.accountLiquidity,r=t.borrowSelectedToken,s=t.tokenPrices,o=t.tokenCollateralFactors;if(null!==(n=e.props.web3._provider)&&void 0!==n&&n.selectedAddress&&r){var i=s[r];o[r];return a/i}},e.getBorrowLimitFromCollateral=function(){var n,t,a=e.state,r=a.enteredMarkets,s=a.mTokenBalances,o=a.tokenCollateralFactors,i=a.tokenPrices,d=0,c=Object(v.a)(r);try{for(c.s();!(t=c.n()).done;){var u=t.value;d+=s[u=e.getTokenInfoFromAddress(u)]*i[u]*o[u]}}catch(l){c.e(l)}finally{c.f()}return null!==(n=d)&&void 0!==n?n:0},e.getUsedBorrowLimit=function(){var n,t=e.props.web3,a=e.state,r=(a.accountLiquidity,a.borrowSelectedToken),s=a.tokenPrices,o=a.borrowBalances,i=a.tokenCollateralFactors;if(null!==(n=t._provider)&&void 0!==n&&n.selectedAddress&&r){s[r],i[r];var d=e.getBorrowLimitFromCollateral(),c=0;return["WADA","USDC"].forEach((function(e){return c+=o[e]*s[e]})),"".concat((c/d*100).toFixed(2)," %")}return"- %"},e.getOwedBalance=function(){var n,t=e.props.web3,a=e.state,r=a.borrowSelectedToken,s=a.borrowBalances;return null!==(n=t._provider)&&void 0!==n&&n.selectedAddress&&r?"".concat(s[r]/Math.pow(10,e.getUnderlyingTokenDecimals(r))):"-"},e.getCollateralDollars=function(){var n,t=e.state,a=t.accountLiquidity,r=t.borrowSelectedToken;t.tokenPrices,t.tokenCollateralFactors;return null!==(n=e.props.web3._provider)&&void 0!==n&&n.selectedAddress&&r?"$ ".concat(a.toFixed(2)):"$ -"},e.getRepayMaxAmount=function(){var n,t=e.state,a=t.borrowSelectedToken,r=t.tokenBalances,s=t.borrowBalances;return null!==(n=e.props.web3._provider)&&void 0!==n&&n.selectedAddress&&a?r[a]/Math.pow(10,e.getUnderlyingTokenDecimals(a))>=s[a]/Math.pow(10,e.getUnderlyingTokenDecimals(a))?s[a]/Math.pow(10,e.getUnderlyingTokenDecimals(a)):s[a]>0&&r[a]/Math.pow(10,e.getUnderlyingTokenDecimals(a))<s[a]/Math.pow(10,e.getUnderlyingTokenDecimals(a))?r[a]/Math.pow(10,e.getUnderlyingTokenDecimals(a)):0:0},e.getBorrowBalance=function(){var n=Object(i.a)(p.a.mark((function n(t){var a,r,s,o,i,d,c,u,l;return p.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return a=e.props.web3,r=e.state,s=r.exchangeRateMantissas,o=r.borrowBalances,i=e.getTokenInfo(t),d=new a.eth.Contract(B.abi,i),n.next=6,d.methods.getAccountSnapshot(a._provider.selectedAddress).call({from:a._provider.selectedAddress});case 6:return c=n.sent,c[2],u=c[3],s[t]=u,n.next=12,d.methods.borrowBalanceCurrent(a._provider.selectedAddress).call({from:a._provider.selectedAddress});case 12:l=n.sent,o[t]=l,e.setState({exchangeRateMantissas:s,borrowBalances:o});case 15:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}(),e.getAccountLiquidity=Object(i.a)(p.a.mark((function n(){var t,a,r,s,o,i;return p.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=e.props.web3,a=P.address,r=new t.eth.Contract(P.abi,a),n.next=5,r.methods.getAccountLiquidity(t._provider.selectedAddress).call({from:t._provider.selectedAddress});case 5:s=n.sent,o=s[1],i=s[2],o/=1e18,e.setState({accountLiquidity:o,accountShortfall:i});case 10:case"end":return n.stop()}}),n)}))),e.getTokenLiquidity=function(){var n=Object(i.a)(p.a.mark((function n(t){var a,r,s,o,i;return p.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return a=e.props.web3,r=e.state.tokenLiquidity,s=e.getTokenInfo(t),o=new a.eth.Contract(B.abi,s),n.next=6,o.methods.getCash().call({from:a._provider.selectedAddress});case 6:i=n.sent,r[t]=i,e.setState({tokenLiquidity:r});case 9:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}(),e.getCollateralFactor=function(){var n=Object(i.a)(p.a.mark((function n(t){var a,r,s,o,i,d,c;return p.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return a=e.props.web3,r=e.state.tokenCollateralFactors,s=e.getTokenInfo(t),o=P.address,i=new a.eth.Contract(P.abi,o),n.next=7,i.methods.markets(s).call();case 7:d=n.sent,c=d[1],c/=1e18,r[t]=c,e.setState({tokenCollateralFactors:r});case 12:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}(),e.getTokenPriceFromOracle=function(){var n=Object(i.a)(p.a.mark((function n(t){var a,r,s,o,i;return p.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return a=e.props.web3,r=e.state.tokenPrices,s=e.getTokenInfo(t),o=new a.eth.Contract(F.abi,F.address),n.next=6,o.methods.getUnderlyingPrice(s).call({from:a._provider.selectedAddress});case 6:i=n.sent,i/=1e18,r[t]=i,e.setState({tokenPrices:r});case 10:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}(),e.supplyWADA=Object(i.a)(p.a.mark((function n(){var t,a,r;return p.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=e.props.web3,a=new t.eth.Contract(B.abi,e.getTokenInfo("WADA")),new t.eth.Contract(N.abi,e.getUnderlyingTokenInfo("WADA")),r=1*Math.pow(10,18),n.next=6,a.methods.mint(t.utils.toBN(r).toString()).send({from:t._provider.selectedAddress});case 6:case"end":return n.stop()}}),n)}))),e.borrowWADA=Object(i.a)(p.a.mark((function n(){var t,a,r;return p.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=e.props.web3,a=new t.eth.Contract(B.abi,e.getTokenInfo("WADA")),r=1*Math.pow(10,18),n.next=5,a.methods.borrow(t.utils.toBN(r).toString()).send({from:t._provider.selectedAddress});case 5:case"end":return n.stop()}}),n)}))),e.getTokenDecimals=function(){return 8},e.getComptrollerAddress=function(){return P.address},e.enterMarket=Object(i.a)(p.a.mark((function n(){var t,a,r,s,o,i,d;return p.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=e.props,a=t.web3,r=t.toast,s=e.state.supplySelectedToken,o=e.getTokenInfo(s),i=P.address,d=new a.eth.Contract(P.abi,i),n.prev=5,n.next=8,d.methods.enterMarkets([o]).send({from:a._provider.selectedAddress});case 8:n.sent,r({title:"Market Entered",description:"Successfully Entered Market",status:"success",duration:6e3,isClosable:!0}),n.next=15;break;case 12:n.prev=12,n.t0=n.catch(5),r({title:"Error",description:4001===(null===n.t0||void 0===n.t0?void 0:n.t0.code)?"Transaction Declined":"Failed to Enter Market",status:"error",duration:6e3,isClosable:!0});case 15:case"end":return n.stop()}}),n,null,[[5,12]])}))),e.exitMarket=Object(i.a)(p.a.mark((function n(){var t,a,r,s,o,i,d;return p.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=e.props,a=t.web3,r=t.toast,s=e.state.supplySelectedToken,o=e.getTokenInfo(s),i=P.address,d=new a.eth.Contract(P.abi,i),n.prev=5,n.next=8,d.methods.exitMarket(o).send({from:a._provider.selectedAddress});case 8:n.sent,r({title:"Market Exited",description:"Successfully Exited Market",status:"success",duration:6e3,isClosable:!0}),n.next=15;break;case 12:n.prev=12,n.t0=n.catch(5),r({title:"Error",description:4001===(null===n.t0||void 0===n.t0?void 0:n.t0.code)?"Transaction Declined":"Failed to Exit Market",status:"error",duration:6e3,isClosable:!0});case 15:case"end":return n.stop()}}),n,null,[[5,12]])}))),e.getEnteredMarkets=Object(i.a)(p.a.mark((function n(){var t,a,r,s;return p.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=e.props.web3,a=P.address,r=new t.eth.Contract(P.abi,a),n.next=5,r.methods.getAssetsIn(t._provider.selectedAddress).call();case 5:s=n.sent,e.setState({enteredMarkets:s});case 7:case"end":return n.stop()}}),n)}))),e.supplyAssets=Object(i.a)(p.a.mark((function n(){var t,a,r,s,o,i,d,c,u;return p.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=e.props,a=t.web3,r=t.toast,s=e.state,o=s.supplyAmount,i=s.supplySelectedToken,d=new a.eth.Contract(B.abi,e.getTokenInfo(i)),c=new a.eth.Contract(N.abi,e.getUnderlyingTokenInfo(i)),u=o*Math.pow(10,e.getUnderlyingTokenDecimals(i)),n.prev=5,n.next=8,c.methods.approve(e.getTokenInfo(i),a.utils.toBN(u)).send({from:a._provider.selectedAddress});case 8:return n.next=10,d.methods.mint(a.utils.toBN(u).toString()).send({from:a._provider.selectedAddress});case 10:r({title:"Assets Supplied",description:"Successfully Supplied Assets",status:"success",duration:6e3,isClosable:!0}),n.next=16;break;case 13:n.prev=13,n.t0=n.catch(5),r({title:"Error",description:4001===(null===n.t0||void 0===n.t0?void 0:n.t0.code)?"Transaction Declined":"Failed to Supply Assets",status:"error",duration:6e3,isClosable:!0});case 16:case"end":return n.stop()}}),n,null,[[5,13]])}))),e.withdrawAssets=function(){var n=Object(i.a)(p.a.mark((function n(t){var a,r,s,o,i,d,c,u;return p.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return a=e.props,r=a.web3,s=a.toast,o=e.state,i=o.supplyAmount,d=o.supplySelectedToken,c=new r.eth.Contract(B.abi,e.getTokenInfo(d)),u=i*Math.pow(10,e.getUnderlyingTokenDecimals(d)),n.prev=4,n.next=7,c.methods.redeemUnderlying(r.utils.toBN(u).toString()).send({from:r._provider.selectedAddress});case 7:s({title:"Assets Withdrawn",description:"Successfully Withdrawn Assets",status:"success",duration:6e3,isClosable:!0}),n.next=13;break;case 10:n.prev=10,n.t0=n.catch(4),s({title:"Error",description:4001===(null===n.t0||void 0===n.t0?void 0:n.t0.code)?"Transaction Declined":"Failed to Withdraw Assets",status:"error",duration:6e3,isClosable:!0});case 13:case"end":return n.stop()}}),n,null,[[4,10]])})));return function(e){return n.apply(this,arguments)}}(),e.borrowAssets=function(){var n=Object(i.a)(p.a.mark((function n(t){var a,r,s,o,i,d,c,u;return p.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return a=e.props,r=a.web3,s=a.toast,o=e.state,i=o.borrowAmount,d=o.borrowSelectedToken,c=new r.eth.Contract(B.abi,e.getTokenInfo(d)),u=i*Math.pow(10,e.getUnderlyingTokenDecimals(d)),n.prev=4,n.next=7,c.methods.borrow(r.utils.toBN(u).toString()).send({from:r._provider.selectedAddress});case 7:s({title:"Assets Borrowed",description:"Successfully Borrowed Assets",status:"success",duration:6e3,isClosable:!0}),n.next=13;break;case 10:n.prev=10,n.t0=n.catch(4),s({title:"Error",description:4001===(null===n.t0||void 0===n.t0?void 0:n.t0.code)?"Transaction Declined":"Failed to Borrow Assets",status:"error",duration:6e3,isClosable:!0});case 13:case"end":return n.stop()}}),n,null,[[4,10]])})));return function(e){return n.apply(this,arguments)}}(),e.repayAssets=function(){var n=Object(i.a)(p.a.mark((function n(t){var a,r,s,o,i,d,c,u,l;return p.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return a=e.props,r=a.web3,s=a.toast,o=e.state,i=o.borrowAmount,d=o.borrowSelectedToken,c=new r.eth.Contract(B.abi,e.getTokenInfo(d)),u=new r.eth.Contract(N.abi,e.getUnderlyingTokenInfo(d)),l=i*Math.pow(10,e.getUnderlyingTokenDecimals(d)),n.prev=5,n.next=8,u.methods.approve(e.getTokenInfo(d),r.utils.toBN(l)).send({from:r._provider.selectedAddress});case 8:return n.next=10,c.methods.repayBorrow(r.utils.toBN(l).toString()).send({from:r._provider.selectedAddress});case 10:s({title:"Loan Repaid",description:"Successfully Repaid Loan",status:"success",duration:6e3,isClosable:!0}),n.next=16;break;case 13:n.prev=13,n.t0=n.catch(5),s({title:"Error",description:4001===(null===n.t0||void 0===n.t0?void 0:n.t0.code)?"Transaction Declined":"Failed to Repay Loan",status:"error",duration:6e3,isClosable:!0});case 16:case"end":return n.stop()}}),n,null,[[5,13]])})));return function(e){return n.apply(this,arguments)}}(),e.resetSupplyStates=function(){e.setState({supplyIconButtonOpen:!1,supplySliderValue:0,supplySelectedToken:"",supplyAmount:0})},e.resetBorrowStates=function(){e.setState({borrowIconButtonOpen:!1,borrowSliderValue:0,borrowSelectedToken:"",borrowAmount:0})},e.expandViewAllModal=function(){(0,e.props.toast)({title:"Coming Soon!",description:"",status:"info",duration:4e3,isClosable:!0})},e.expandStatModal=function(){(0,e.props.toast)({title:"Coming Soon!",description:"",status:"info",duration:4e3,isClosable:!0})},e}return Object(c.a)(t,[{key:"componentDidMount",value:function(){var e=this;this.getBalances(),this.interval=setInterval((function(){return e.getBalances()}),1e3)}},{key:"render",value:function(){var e,n,t,a,r,s,o,i,d,c,u,l=this;return Object(D.jsxs)(m.a,{className:"app",height:{base:"110vh",md:"91vh",lg:"90vh",xl:"89vh","2xl":"83vh"},children:[this.props.isMobile?null:Object(D.jsx)(m.b,{children:Object(D.jsxs)(m.d,{className:"MainContainerStatContainer",spacing:"11vw",p:3,mt:"1vh",mb:"-15vh",children:[Object(D.jsxs)(_.a,{children:[Object(D.jsx)(_.b,{children:"Total Supply"}),Object(D.jsx)(_.c,{children:"$-"})]}),Object(D.jsx)(E.a,{className:"MainContainerStatButton",onClick:this.expandStatModal,children:"Expand"}),Object(D.jsxs)(_.a,{children:[Object(D.jsx)(_.b,{style:{whiteSpace:"nowrap"},children:"Total Borrow"}),Object(D.jsx)(_.c,{children:"$-"})]})]})}),Object(D.jsx)(m.b,{w:"100%",h:"100%",children:Object(D.jsxs)(L,{condition:this.props.isMobile,wrapper:function(e){return Object(D.jsx)(m.i,{children:e})},children:[Object(D.jsxs)(m.i,{className:"SupplyStack",height:{base:"35%",md:"38%",lg:"40%",xl:"40%","2xl":"55%"},width:{base:"100%",md:"40%",lg:"40%",xl:"35%","2xl":"25%"},mt:["25vh","0"],mr:["0","5vw"],mb:["4vh","0"],children:[Object(D.jsxs)(m.d,{width:"100%",children:[Object(D.jsx)(E.a,{className:"MainContainerButton",width:"50%",onClick:function(){l.setState({supplyState:"Lend"}),l.resetSupplyStates()},children:"Lend"}),Object(D.jsx)(E.a,{className:"MainContainerButton",width:"50%",onClick:function(){l.setState({supplyState:"Withdraw"}),l.resetSupplyStates()},children:"Withdraw"})]}),Object(D.jsxs)(m.a,{className:"SupplyContainer",height:"100%",width:"100%",mr:["0","5vw"],p:["5vw","0"],children:[Object(D.jsx)(m.b,{p:5,height:"10%",width:"100%",children:Object(D.jsx)(m.e,{className:"MainContainerHeading",size:"md",children:"Lend"===this.state.supplyState?"Lend Assets":"Withdraw Assets"})}),Object(D.jsx)(m.b,{children:Object(D.jsxs)(m.a,{className:"MainContainerFormRepayInfo",width:{base:"85%",md:"65%",lg:"65%",xl:"65%","2xl":"50%"},height:"100%",p:2,children:[Object(D.jsxs)(m.d,{children:[Object(D.jsx)(m.h,{fontSize:"sm",children:"Lend"===this.state.supplyState?"Balance":"Supply Balance"}),Object(D.jsx)(m.g,{}),Object(D.jsx)(m.h,{fontSize:"sm",children:"Lend"===this.state.supplyState?this.state.supplySelectedToken?(this.state.tokenBalances[this.state.supplySelectedToken]/Math.pow(10,this.getUnderlyingTokenDecimals(this.state.supplySelectedToken))).toFixed(4):"-":this.state.supplySelectedToken?(this.state.mTokenBalances[this.state.supplySelectedToken]/Math.pow(10,this.getUnderlyingTokenDecimals(this.state.supplySelectedToken))).toFixed(4):"-"})]}),Object(D.jsxs)(m.d,{children:[Object(D.jsx)(m.h,{fontSize:"sm",children:"Deposit APY"}),Object(D.jsx)(m.g,{}),Object(D.jsxs)(m.h,{fontSize:"sm",children:[this.state.tokenAPY[this.state.supplySelectedToken]?this.state.tokenAPY[this.state.supplySelectedToken].supplyAPY.toFixed(4):"-"," %"]})]}),"Lend"===this.state.supplyState?Object(D.jsxs)(m.d,{children:[Object(D.jsx)(m.h,{fontSize:"sm",children:"Reward APY"}),Object(D.jsx)(m.g,{}),Object(D.jsx)(m.h,{fontSize:"sm",children:"0.00 %"})]}):null]})}),Object(D.jsx)(m.b,{children:Object(D.jsx)(C.a,{className:"MainContainerSelect",value:this.state.supplySelectedToken,onChange:function(e){return l.setState({supplySelectedToken:e})},searchable:!0,maxDropdownHeight:200,data:[{value:"WADA",label:"WADA"},{value:"USDC",label:"USDC"}]})}),Object(D.jsx)(m.b,{children:Object(D.jsxs)(m.i,{children:[Object(D.jsxs)(m.d,{style:{marginTop:"1vh"},spacing:5,children:[Object(D.jsx)(E.a,{onClick:"Lend"===this.state.supplyState?function(){return l.setState({supplyAmount:l.state.tokenBalances[l.state.supplySelectedToken]/Math.pow(10,l.getUnderlyingTokenDecimals(l.state.supplySelectedToken)),supplySliderValue:100})}:function(){return l.setState({supplyAmount:(l.state.mTokenBalances[l.state.supplySelectedToken]-l.state.borrowBalances[l.state.supplySelectedToken])/Math.pow(10,l.getUnderlyingTokenDecimals(l.state.supplySelectedToken)),supplySliderValue:100})},className:"MainContainerFormMax",children:"Max"}),Object(D.jsx)(k.a,{type:"number",onChange:function(e){return l.setState({supplyAmount:e.target.value})},value:this.state.supplyAmount,className:"MainContainerFormInput",placeholder:"Amount",size:"md",width:{base:"20vw",md:"15vw",lg:"10vw",xl:"10vw","2xl":"5vw"}}),Object(D.jsx)(E.b,{className:"MainContainerFormIconButton",icon:!1===this.state.supplyIconButtonOpen?Object(D.jsx)(I.b,{}):Object(D.jsx)(I.a,{}),onClick:function(){return l.setState({supplyIconButtonOpen:!l.state.supplyIconButtonOpen})}})]}),this.state.supplyIconButtonOpen?Object(D.jsxs)(A.a,{"aria-label":"slider-ex-1",min:0,max:100,defaultValue:this.state.supplySliderValue,onChange:function(e){return"Lend"===l.state.supplyState?l.setState({supplySliderValue:e,supplyAmount:l.state.tokenBalances[l.state.supplySelectedToken]/Math.pow(10,l.getUnderlyingTokenDecimals(l.state.supplySelectedToken))*(.01*e)}):l.setState({supplySliderValue:e,supplyAmount:(l.state.mTokenBalances[l.state.supplySelectedToken]-l.state.borrowBalances[l.state.supplySelectedToken])/Math.pow(10,l.getUnderlyingTokenDecimals(l.state.supplySelectedToken))*(.01*e)})},children:[Object(D.jsx)(A.d,{children:Object(D.jsx)(A.b,{className:"MainContainerFormSlider"})}),Object(D.jsx)(x.a,{className:"MainContainerFormSliderTooltip",color:"white",placement:"right",isOpen:this.state.supplyIconButtonOpen,label:"".concat(this.state.supplySliderValue,"%"),children:Object(D.jsx)(A.c,{className:"MainContainerFormThumb"})})]}):null,Object(D.jsx)(E.a,{onClick:"Lend"===this.state.supplyState?null!==(e=this.props.web3._provider)&&void 0!==e&&e.selectedAddress&&this.state.supplySelectedToken&&this.state.supplyAmount>0&&this.state.supplyAmount<=this.state.tokenBalances[this.state.supplySelectedToken]/Math.pow(10,this.getUnderlyingTokenDecimals(this.state.supplySelectedToken))?this.supplyAssets:null:null!==(n=this.props.web3._provider)&&void 0!==n&&n.selectedAddress&&this.state.supplySelectedToken&&this.state.supplyAmount>0&&this.state.supplyAmount<=this.state.mTokenBalances[this.state.supplySelectedToken]/Math.pow(10,this.getUnderlyingTokenDecimals(this.state.supplySelectedToken))?this.withdrawAssets:null,className:"MainContainerButton",width:"100%",children:"Lend"===this.state.supplyState?null!==(t=this.props.web3._provider)&&void 0!==t&&t.selectedAddress?this.state.supplySelectedToken?this.state.supplyAmount<=0||this.state.supplyAmount>this.state.tokenBalances[this.state.supplySelectedToken]/Math.pow(10,this.getUnderlyingTokenDecimals(this.state.supplySelectedToken))?"Invalid Balance":"Supply":"Select a Token":"Connect Wallet":null!==(a=this.props.web3._provider)&&void 0!==a&&a.selectedAddress?this.state.supplySelectedToken?this.state.supplyAmount<=0||this.state.supplyAmount>this.state.mTokenBalances[this.state.supplySelectedToken]/Math.pow(10,this.getUnderlyingTokenDecimals(this.state.supplySelectedToken))?"Invalid Balance":"Withdraw":"Select a Token":"Connect Wallet"})]})}),"Lend"===this.state.supplyState?Object(D.jsxs)(m.b,{className:"MainContainerFormCollateral",children:[Object(D.jsx)(m.h,{htmlFor:"enableCollateral",children:"Enable Asset as Collateral?"}),Object(D.jsx)(R.a,{isChecked:null!==(r=this.state.enteredMarkets[this.state.enteredMarkets.indexOf(this.getTokenInfo(this.state.supplySelectedToken))])&&void 0!==r&&r,onChange:this.state.supplySelectedToken?this.state.enteredMarkets[this.state.enteredMarkets.indexOf(this.getTokenInfo(this.state.supplySelectedToken))]?this.exitMarket:this.enterMarket:null,p:1,id:"enableCollateral"})]}):null]})]}),Object(D.jsxs)(m.i,{height:{base:"55%",md:"38%",lg:"40%",xl:"40%","2xl":"55%"},width:{base:"100%",md:"40%",lg:"40%",xl:"35%","2xl":"25%"},children:[Object(D.jsxs)(m.d,{width:"100%",children:[Object(D.jsx)(E.a,{className:"MainContainerButton",width:"50%",onClick:function(){l.setState({borrowState:"Borrow"}),l.resetBorrowStates()},children:"Borrow"}),Object(D.jsx)(E.a,{className:"MainContainerButton",width:"50%",onClick:function(){l.setState({borrowState:"Repay"}),l.resetBorrowStates()},children:"Repay"})]}),Object(D.jsxs)(m.a,{className:"BorrowContainer",height:"100%",width:"100%",p:["5vw","0"],children:[Object(D.jsx)(m.b,{p:5,height:"10%",width:"100%",children:Object(D.jsx)(m.e,{className:"MainContainerHeading",size:"md",children:"Borrow"===this.state.borrowState?"Borrow Assets":"Repay Assets"})}),Object(D.jsx)(m.b,{children:Object(D.jsxs)(m.a,{className:"MainContainerFormRepayInfo",width:{base:"85%",md:"65%",lg:"65%",xl:"65%","2xl":"50%"},height:"100%",p:2,children:["Repay"===this.state.borrowState?Object(D.jsxs)(m.d,{children:[Object(D.jsx)(m.h,{fontSize:"sm",children:"You owe "}),Object(D.jsx)(m.g,{}),Object(D.jsx)(m.h,{fontSize:"sm",children:this.getOwedBalance()})]}):null,"Repay"===this.state.borrowState?Object(D.jsxs)(m.d,{children:[Object(D.jsx)(m.h,{fontSize:"sm",children:"Your Collateral"}),Object(D.jsx)(m.g,{}),Object(D.jsx)(m.h,{fontSize:"sm",children:this.getCollateralDollars()})]}):null,"Repay"===this.state.borrowState?Object(D.jsx)("span",{style:{opacity:"0"},children:"Spacer"}):null,Object(D.jsxs)(m.d,{children:[Object(D.jsx)(m.h,{fontSize:"sm",children:"Borrow"===this.state.borrowState?"Borrow Limit":"Balance"}),Object(D.jsx)(m.g,{}),Object(D.jsx)(m.h,{fontSize:"sm",children:"Borrow"===this.state.borrowState?this.getBorrowLimit():null!==(s=this.props.web3._provider)&&void 0!==s&&s.selectedAddress&&this.state.borrowSelectedToken?(this.state.tokenBalances[this.state.borrowSelectedToken]/Math.pow(10,this.getUnderlyingTokenDecimals(this.state.borrowSelectedToken))).toFixed(4):"-"})]}),Object(D.jsxs)(m.d,{children:[Object(D.jsx)(m.h,{fontSize:"sm",children:"Borrow"===this.state.borrowState?"Used Limit":"Liquidity Available"}),Object(D.jsx)(m.g,{}),Object(D.jsx)(m.h,{fontSize:"sm",children:"Borrow"===this.state.borrowState?this.getUsedBorrowLimit():null!==(o=this.props.web3._provider)&&void 0!==o&&o.selectedAddress&&this.state.borrowSelectedToken?(this.state.tokenLiquidity[this.state.borrowSelectedToken]/Math.pow(10,this.getUnderlyingTokenDecimals(this.state.borrowSelectedToken))).toFixed(2):"-"})]}),"Borrow"===this.state.borrowState?Object(D.jsxs)(m.d,{children:[Object(D.jsx)(m.h,{fontSize:"sm",children:"Reward APY"}),Object(D.jsx)(m.g,{}),Object(D.jsx)(m.h,{fontSize:"sm",children:"0.00 %"})]}):null]})}),Object(D.jsx)(m.b,{children:Object(D.jsx)(C.a,{className:"MainContainerSelect",value:this.state.borrowSelectedToken,onChange:function(e){return l.setState({borrowSelectedToken:e})},searchable:!0,maxDropdownHeight:200,data:[{value:"WADA",label:"WADA"},{value:"USDC",label:"USDC"}]})}),Object(D.jsx)(m.b,{children:Object(D.jsxs)(m.i,{children:[Object(D.jsxs)(m.d,{style:{marginTop:"1vh"},spacing:5,children:[Object(D.jsx)(E.a,{onClick:"Borrow"===this.state.borrowState?function(){return l.setState({borrowAmount:l.getBorrowLimitTokens(),borrowSliderValue:100})}:function(){return l.setState({borrowAmount:l.getRepayMaxAmount(),borrowSliderValue:100})},className:"MainContainerFormMax",children:"Max"}),Object(D.jsx)(k.a,{type:"number",onChange:function(e){return l.setState({borrowAmount:e.target.value})},value:this.state.borrowAmount,className:"MainContainerFormInput",placeholder:"Amount",size:"md",width:{base:"20vw",md:"15vw",lg:"10vw",xl:"10vw","2xl":"5vw"}}),Object(D.jsx)(E.b,{className:"MainContainerFormIconButton",icon:!1===this.state.borrowIconButtonOpen?Object(D.jsx)(I.b,{}):Object(D.jsx)(I.a,{}),onClick:function(){return l.setState({borrowIconButtonOpen:!l.state.borrowIconButtonOpen})}})]}),this.state.borrowIconButtonOpen?Object(D.jsxs)(A.a,{"aria-label":"slider-ex-1",min:0,max:100,defaultValue:this.state.borrowSliderValue,onChange:function(e){return"Borrow"===l.state.borrowState?l.setState({borrowSliderValue:e,borrowAmount:l.getBorrowLimitTokens()*(.01*e)}):l.setState({borrowSliderValue:e,borrowAmount:l.getRepayMaxAmount()*(.01*e)})},children:[Object(D.jsx)(A.d,{children:Object(D.jsx)(A.b,{className:"MainContainerFormSlider"})}),Object(D.jsx)(x.a,{className:"MainContainerFormSliderTooltip",color:"white",placement:"right",isOpen:this.state.borrowIconButtonOpen,label:"".concat(this.state.borrowSliderValue,"%"),children:Object(D.jsx)(A.c,{className:"MainContainerFormThumb"})})]}):null,Object(D.jsx)(E.a,{onClick:"Borrow"===this.state.borrowState?null!==(i=this.props.web3._provider)&&void 0!==i&&i.selectedAddress&&this.state.borrowSelectedToken&&this.state.borrowAmount>0&&this.state.borrowAmount<=this.getBorrowLimitTokens()?this.borrowAssets:null:null!==(d=this.props.web3._provider)&&void 0!==d&&d.selectedAddress&&this.state.borrowSelectedToken&&this.state.borrowAmount>0&&this.state.borrowAmount<=this.getRepayMaxAmount()?this.repayAssets:null,className:"MainContainerButton",width:"100%",children:"Borrow"===this.state.borrowState?null!==(c=this.props.web3._provider)&&void 0!==c&&c.selectedAddress?this.state.borrowSelectedToken?this.state.borrowAmount<=0||this.state.borrowAmount>this.getBorrowLimitTokens()?"Invalid Balance":"Borrow":"Select a Token":"Connect Wallet":null!==(u=this.props.web3._provider)&&void 0!==u&&u.selectedAddress?this.state.borrowSelectedToken?this.state.borrowAmount<=0||this.state.borrowAmount>this.getRepayMaxAmount()?"Invalid Balance":"Repay":"Select a Token":"Connect Wallet"})]})})]})]})]})}),this.props.isMobile?null:Object(D.jsx)(m.b,{mt:["15vh","-10vh"],children:Object(D.jsx)(E.a,{className:"MainContainerViewAllButton",onClick:this.expandViewAllModal,children:"View All Assets and Modify Collateral"})})]})}}]),t}(r.a.Component),q=(j=U,function(e){var n=Object(S.a)({base:!0,md:!1});return Object(D.jsx)(j,Object(b.a)(Object(b.a)({},e),{},{isMobile:n}))}),V=function(e){Object(u.a)(t,e);var n=Object(l.a)(t);function t(){return Object(d.a)(this,t),n.apply(this,arguments)}return Object(c.a)(t,[{key:"render",value:function(){return Object(D.jsx)(m.a,{className:"end-footer",mt:["25vh","0"],height:{base:"4vh",md:"5vh",lg:"6vh",xl:"6vh","2xl":"10vh"}})}}]),t}(r.a.Component),z=V,W=t.p+"static/media/logo_2a.73c848ed.png",H=t(263);var G=function(e){Object(u.a)(t,e);var n=Object(l.a)(t);function t(){var e;Object(d.a)(this,t);for(var a=arguments.length,r=new Array(a),s=0;s<a;s++)r[s]=arguments[s];return(e=n.call.apply(n,[this].concat(r))).connectweb3=Object(i.a)(p.a.mark((function n(){var t,a,r,s,o,i;return p.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=e.props,a=t.web3Modal,r=t.updateWeb3,s=t.toast,n.prev=1,n.next=4,a.connect();case 4:if("0x30da5"===(o=n.sent).chainId){n.next=7;break}return n.abrupt("return",s({title:"Wallet Error",description:"Wrong Network, please connect to Milkomeda",status:"error",duration:6e3,isClosable:!0}));case 7:i=new T.a(o),r(i),s({title:"Connected!",description:"Successfully connected to Milkomeda",status:"success",duration:6e3,isClosable:!0}),n.next=15;break;case 12:n.prev=12,n.t0=n.catch(1),s({title:"Wallet Error",description:"Error when trying to connect to wallet.",status:"error",duration:6e3,isClosable:!0});case 15:case"end":return n.stop()}}),n,null,[[1,12]])}))),e}return Object(c.a)(t,[{key:"render",value:function(){var e=this.props,n=e.web3Modal,t=e.updateWeb3,a=e.toast,r=e.web3,s=e.buttonSize,o=e.textSize;return Object(D.jsx)(m.a,{className:"navbar",height:{base:"6vh",md:"4vh",lg:"4vh",xl:"5vh","2xl":"7vh"},children:Object(D.jsxs)(m.c,{align:"center",justify:"space-between",mb:8,mt:{base:"-3vh",md:"-1vh",lg:"-2vh",xl:"-3vh","2xl":"-4vh"},children:[Object(D.jsxs)(m.d,{spacing:"2vw",children:[Object(D.jsx)(H.a,{className:"ImageClass",src:W,alt:"Milkyway",boxSize:"4vw",height:{base:"24vw",md:"10vw",lg:"10vw",xl:"10vw","2xl":"8vw"}}),Object(D.jsx)(m.e,{size:s,children:"Lending"})]}),Object(D.jsx)(m.g,{}),Object(D.jsxs)(m.d,{spacing:"1vw",children:[Object(D.jsx)(m.e,{size:o,children:M(r)?"Not Connected":"Milkomeda"}),Object(D.jsx)(m.e,{size:o,children:"EN"}),Object(D.jsx)(E.a,{size:s,onClick:function(){return M(r)?O(a,n,t):function(e,n){e({}),n({title:"Disconnected!",description:"Successfully disconnected.",status:"success",duration:6e3,isClosable:!0})}(t,a)},className:"ConnectWeb3",children:M(r)?"Connect":"Disconnect"})]})]})})}}]),t}(r.a.Component),K=function(e){return function(n){var t=Object(S.a)({base:"sm",md:"md"}),a=Object(S.a)({base:"xs",md:"sm"});return Object(D.jsx)(e,Object(b.a)(Object(b.a)({},n),{},{buttonSize:t,textSize:a}))}}(G);var Y=function(e){Object(u.a)(t,e);var n=Object(l.a)(t);function t(){var e;Object(d.a)(this,t);for(var a=arguments.length,r=new Array(a),s=0;s<a;s++)r[s]=arguments[s];return(e=n.call.apply(n,[this].concat(r))).state={web3:{},web3Modal:{},provider:{}},e.updateWeb3=function(n,t){return e.setState({web3:n,provider:t})},e}return Object(c.a)(t,[{key:"componentDidMount",value:function(){var e=Object(i.a)(p.a.mark((function e(){var n,t;return p.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=this.props.toast,t=new g.a({cacheProvider:!0,providerOptions:{}}),this.setState({web3Modal:t}),e.next=5,O(n,t,this.updateWeb3);case 5:case"end":return e.stop()}}),e,this)})));return function(){return e.apply(this,arguments)}}()},{key:"render",value:function(){return Object(D.jsx)("div",{className:"main-app",children:Object(D.jsxs)(m.f,{overflowY:"auto",minChildWidth:"100%",children:[Object(D.jsx)(K,{updateWeb3:this.updateWeb3,web3Modal:this.state.web3Modal,toast:this.props.toast,web3:this.state.web3}),Object(D.jsx)(q,{updateWeb3:this.updateWeb3,web3Modal:this.state.web3Modal,web3:this.state.web3,toast:this.props.toast}),Object(D.jsx)(z,{})]})})}}]),t}(r.a.Component),Z=function(e){return function(n){var t=Object(y.a)();return Object(D.jsx)(e,Object(b.a)(Object(b.a)({},n),{},{toast:t}))}}(Y),Q=function(e){e&&e instanceof Function&&t.e(3).then(t.bind(null,613)).then((function(n){var t=n.getCLS,a=n.getFID,r=n.getFCP,s=n.getLCP,o=n.getTTFB;t(e),a(e),r(e),s(e),o(e)}))},J=t(54);o.a.render(Object(D.jsx)(J.a,{children:Object(D.jsx)(r.a.StrictMode,{children:Object(D.jsx)(Z,{})})}),document.getElementById("root")),Q()}},[[601,1,2]]]);
//# sourceMappingURL=main.266b18a1.chunk.js.map